{
	"info": {
		"_postman_id": "be2c08ba-4d47-43e7-a7d8-c40e58667654",
		"name": "ForgeRock Identity Cloud Collection",
		"description": "> **Tip**\n>\n> Edit the `amRealm` Postman variable to change the realm of requests in this collection.  \n\nAM uses the default authentication service configured for the realm. You can override the default by specifying authentication services in the REST request.\n\n> **Tip**\n>\n> Edit the `amAuthenticationTree` Postman variable to change the AM service used by requests in this collection. \n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prerequisites",
			"item": [
				{
					"name": "Step 1: Start Authentication to Top-Level Realm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"}",
									"",
									"// Tests",
									"pm.test(\"Status code is 200.\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('authId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "The media type of the resource.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "This collection documents version 2.1 of the authentication resource.",
								"key": "Accept-API-Version",
								"value": "resource=2.1"
							}
						],
						"url": {
							"raw": "{{amUrl}}/json/authenticate",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json",
								"authenticate"
							]
						},
						"description": "To get started, request the callbacks from the top-level realm."
					},
					"response": []
				},
				{
					"name": "Step 2a: Authenticate as ID Cloud Admin using Username / Password Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"}",
									"",
									"// Tests",
									"pm.test(\"Status code is 200.\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('authId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.1, protocol=1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json/authenticate",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json",
								"authenticate"
							]
						},
						"description": "Return the Username / Password callbacks received from the previous step, specifying the credentials of an administrative user.\n"
					},
					"response": []
				},
				{
					"name": "Step 2b: Authenticate as ID Cloud Admin using MFA Skip Callback, Get Session Token and Cookie Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `adminSSOToken` variable",
									"  pm.globals.set(\"adminSSOToken\", JSONResponse.tokenId);",
									"",
									"  // Get custom cookie name",
									"  var customCookieName = frUtils.getSessionCookieName(pm.response.headers.all());",
									"  pm.collectionVariables.set(\"cookieName\", customCookieName);",
									"",
									"  // Remove `authId` variable",
									"  pm.globals.unset(\"authId\");",
									"",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.1, protocol=1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"TextOutputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"message\",\n                    \"value\": \"Skip\"\n                },\n                {\n                    \"name\": \"messageType\",\n                    \"value\": \"0\"\n                }\n            ]\n        },\n        {\n            \"type\": \"ConfirmationCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"\"\n                },\n                {\n                    \"name\": \"messageType\",\n                    \"value\": 0\n                },\n                {\n                    \"name\": \"options\",\n                    \"value\": [\n                        \"Set up\"\n                    ]\n                },\n                {\n                    \"name\": \"optionType\",\n                    \"value\": -1\n                },\n                {\n                    \"name\": \"defaultOption\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": 0\n                }\n            ]\n        },\n        {\n            \"type\": \"HiddenValueCallback\",\n            \"output\": [\n                {\n                    \"name\": \"value\",\n                    \"value\": \"false\"\n                },\n                {\n                    \"name\": \"id\",\n                    \"value\": \"Skip\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken3\",\n                    \"value\": \"Skip\"\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json/authenticate",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json",
								"authenticate"
							]
						},
						"description": "Return the MFA skip callbacks received from the previous step. \n\nThen get the session token from the response headers. To manually provide the session token name, navigate to **Tenant Settings** in the ID Cloud console and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
					},
					"response": [
						{
							"name": "Success - authentication complete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=0_OKRrdKWp4qNlomyaBn3lRl23U.*AAJTSQACMDEAAlNLABxiNmZiTnVSV05IbUFNbWprV3ZndUlNdlVYNDg9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "167"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:08:53 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
						}
					]
				},
				{
					"name": "Step 3: Create Administrative OAuth 2.0 Client",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "Specifies certain media types which are acceptable for the resource.",
								"key": "accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"description": "The media type of the resource.",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"description": "Custom header.",
								"key": "X-Requested-With",
								"type": "text",
								"value": "ForgeRock Identity Cloud Postman Collection"
							},
							{
								"description": "SSO token of an administrator. ",
								"key": "{{cookieName}}",
								"type": "text",
								"value": "{{adminSSOToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"coreOAuth2ClientConfig\": {\n    \"agentgroup\": \"\",\n    \"status\": {\n      \"inherited\": false,\n      \"value\": \"Active\"\n    },\n    \n    \"userpassword\": \"{{postmanClientSecret}}\",\n    \"clientType\": {\n      \"inherited\": false,\n      \"value\": \"Confidential\"\n    },\n    \"loopbackInterfaceRedirection\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"redirectionUris\": {\n      \"inherited\": false,\n      \"value\": [\n        \"https://httpbin.org/anything\"\n      ]\n    },\n    \"scopes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"fr:idm:*\"\n      ]\n    },\n    \"defaultScopes\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"clientName\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"authorizationCodeLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"refreshTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"accessTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    }\n  },\n  \"advancedOAuth2ClientConfig\": {\n    \"name\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"descriptions\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"requestUris\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"responseTypes\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"grantTypes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"password\"\n      ]\n    },\n    \"contacts\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"tokenEndpointAuthMethod\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"sectorIdentifierUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"subjectType\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"updateAccessToken\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"clientUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"logoUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"policyUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"isConsentImplied\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"mixUpMitigation\": {\n      \"inherited\": true,\n      \"value\": true\n    }\n  },\n  \"coreOpenIDClientConfig\": {\n    \"claims\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"postLogoutRedirectUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"clientSessionUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"defaultMaxAge\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"defaultMaxAgeEnabled\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"defaultAcrValues\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"jwtTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    }\n  },\n  \"signEncOAuth2ClientConfig\": {\n    \"jwksUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"jwksCacheTimeout\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"jwkStoreCacheMissCacheTime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"tokenEndpointAuthSigningAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"jwkSet\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenEncryptionEnabled\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"idTokenEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenEncryptionMethod\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenPublicEncryptionKey\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"clientJwtPublicKey\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSTrustedCert\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSSubjectDN\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSCertificateBoundAccessTokens\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"publicKeyLocation\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoResponseFormat\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoEncryptedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoEncryptedResponseEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterSignedAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterEncryptedAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterEncryptedEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionResponseFormat\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionEncryptedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionEncryptedResponseEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    }\n  },\n  \"coreUmaClientConfig\": {\n    \"claimsRedirectionUris\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/realm-config/agents/OAuth2Client/{{postmanAdminClientId}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"realm-config",
								"agents",
								"OAuth2Client",
								"{{postmanAdminClientId}}"
							]
						},
						"description": "Create an OAuth 2.0 client for obtaining scopes as an administrator. The access tokens granted by this client are used to perform administrative tasks throughout this collection."
					},
					"response": []
				},
				{
					"name": "Step 4: Create a Confidential OAuth 2.0 Client",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text",
								"description": "Specifies certain media types which are acceptable for the resource."
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "The media type of the resource."
							},
							{
								"key": "X-Requested-With",
								"value": "ForgeRock Identity Cloud Postman Collection",
								"type": "text",
								"description": "Custom header."
							},
							{
								"key": "{{cookieName}}",
								"value": "{{adminSSOToken}}",
								"type": "text",
								"description": "SSO token of an administrator. "
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"coreOAuth2ClientConfig\": {\n    \"agentgroup\": \"\",\n    \"status\": {\n      \"inherited\": false,\n      \"value\": \"Active\"\n    },\n    \n    \"userpassword\": \"{{postmanClientSecret}}\",\n    \"clientType\": {\n      \"inherited\": false,\n      \"value\": \"Confidential\"\n    },\n    \"loopbackInterfaceRedirection\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"redirectionUris\": {\n      \"inherited\": false,\n      \"value\": [\n        \"https://httpbin.org/anything\"\n      ]\n    },\n    \"scopes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"write\",\n        \"read\",\n        \"share\",\n        \"print\",\n        \"copy\",\n        \"delete\",\n        \"manage\",\n        \"edit\",\n        \"am-introspect-all-tokens\"\n      ]\n    },\n    \"defaultScopes\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"clientName\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"authorizationCodeLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"refreshTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"accessTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    }\n  },\n  \"advancedOAuth2ClientConfig\": {\n    \"name\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"descriptions\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"requestUris\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"responseTypes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"code\",\n        \"token\"\n      ]\n    },\n    \"grantTypes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"password\",\n        \"client_credentials\",\n        \"refresh_token\",\n        \"urn:ietf:params:oauth:grant-type:uma-ticket\",\n        \"urn:ietf:params:oauth:grant-type:device_code\",\n        \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        \"urn:openid:params:grant-type:ciba\"\n      ]\n    },\n    \"contacts\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"tokenEndpointAuthMethod\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"sectorIdentifierUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"subjectType\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"updateAccessToken\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"clientUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"logoUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"policyUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"isConsentImplied\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"mixUpMitigation\": {\n      \"inherited\": true,\n      \"value\": true\n    }\n  },\n  \"coreOpenIDClientConfig\": {\n    \"claims\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"postLogoutRedirectUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"clientSessionUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"defaultMaxAge\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"defaultMaxAgeEnabled\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"defaultAcrValues\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"jwtTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    }\n  },\n  \"signEncOAuth2ClientConfig\": {\n    \"jwksUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"jwksCacheTimeout\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"jwkStoreCacheMissCacheTime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"tokenEndpointAuthSigningAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"jwkSet\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenEncryptionEnabled\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"idTokenEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenEncryptionMethod\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenPublicEncryptionKey\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"clientJwtPublicKey\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSTrustedCert\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSSubjectDN\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSCertificateBoundAccessTokens\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"publicKeyLocation\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoResponseFormat\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoEncryptedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoEncryptedResponseEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterSignedAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterEncryptedAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterEncryptedEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionResponseFormat\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionEncryptedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionEncryptedResponseEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    }\n  },\n  \"coreUmaClientConfig\": {\n    \"claimsRedirectionUris\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/realm-config/agents/OAuth2Client/{{postmanConfidentialClientId}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"realm-config",
								"agents",
								"OAuth2Client",
								"{{postmanConfidentialClientId}}"
							]
						},
						"description": "Register a demonstration confidential client, used in the OAuth 2.0 flows section of the collection."
					},
					"response": []
				},
				{
					"name": "Step 5: Create a Public OAuth 2.0 Client",
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "Specifies certain media types which are acceptable for the resource.",
								"key": "accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"description": "The media type of the resource.",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"description": "Custom header.",
								"key": "X-Requested-With",
								"type": "text",
								"value": "ForgeRock Identity Cloud Postman Collection"
							},
							{
								"description": "SSO token of an administrator. ",
								"key": "{{cookieName}}",
								"type": "text",
								"value": "{{adminSSOToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"coreOAuth2ClientConfig\": {\n    \"agentgroup\": \"\",\n    \"status\": {\n      \"inherited\": false,\n      \"value\": \"Active\"\n    },\n    \n    \"userpassword\": \"{{postmanClientSecret}}\",\n    \"clientType\": {\n      \"inherited\": false,\n      \"value\": \"Public\"\n    },\n    \"loopbackInterfaceRedirection\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"redirectionUris\": {\n      \"inherited\": false,\n      \"value\": [\n        \"https://httpbin.org/anything\"\n      ]\n    },\n    \"scopes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"write\",\n        \"read\",\n        \"share\",\n        \"print\",\n        \"copy\",\n        \"delete\",\n        \"manage\",\n        \"edit\"\n      ]\n    },\n    \"defaultScopes\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"clientName\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"authorizationCodeLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"refreshTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"accessTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    }\n  },\n  \"advancedOAuth2ClientConfig\": {\n    \"name\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"descriptions\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"requestUris\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"responseTypes\": {\n      \"inherited\": true,\n      \"value\": [\n        \"code\",\n        \"token\"\n      ]\n    },\n    \"grantTypes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"password\",\n        \"client_credentials\",\n        \"refresh_token\",\n        \"urn:ietf:params:oauth:grant-type:uma-ticket\",\n        \"urn:ietf:params:oauth:grant-type:device_code\",\n        \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        \"urn:openid:params:grant-type:ciba\"\n      ]\n    },\n    \"contacts\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"tokenEndpointAuthMethod\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"sectorIdentifierUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"subjectType\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"updateAccessToken\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"clientUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"logoUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"policyUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"isConsentImplied\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"mixUpMitigation\": {\n      \"inherited\": true,\n      \"value\": true\n    }\n  },\n  \"coreOpenIDClientConfig\": {\n    \"claims\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"postLogoutRedirectUri\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"clientSessionUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"defaultMaxAge\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"defaultMaxAgeEnabled\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"defaultAcrValues\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    },\n    \"jwtTokenLifetime\": {\n      \"inherited\": true,\n      \"value\": 0\n    }\n  },\n  \"signEncOAuth2ClientConfig\": {\n    \"jwksUri\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"jwksCacheTimeout\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"jwkStoreCacheMissCacheTime\": {\n      \"inherited\": true,\n      \"value\": 0\n    },\n    \"tokenEndpointAuthSigningAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"jwkSet\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenEncryptionEnabled\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"idTokenEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenEncryptionMethod\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"idTokenPublicEncryptionKey\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"clientJwtPublicKey\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSTrustedCert\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSSubjectDN\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"mTLSCertificateBoundAccessTokens\": {\n      \"inherited\": true,\n      \"value\": true\n    },\n    \"publicKeyLocation\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoResponseFormat\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoEncryptedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"userinfoEncryptedResponseEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterSignedAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterEncryptedAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"requestParameterEncryptedEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionResponseFormat\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionSignedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionEncryptedResponseAlg\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    },\n    \"tokenIntrospectionEncryptedResponseEncryptionAlgorithm\": {\n      \"inherited\": true,\n      \"value\": \"string\"\n    }\n  },\n  \"coreUmaClientConfig\": {\n    \"claimsRedirectionUris\": {\n      \"inherited\": true,\n      \"value\": [\n        \"Unknown Type: any\"\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/realm-config/agents/OAuth2Client/{{postmanPublicClientId}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"realm-config",
								"agents",
								"OAuth2Client",
								"{{postmanPublicClientId}}"
							]
						},
						"description": "Register a demonstration public client, used in the OAuth 2.0 flows section of the collection."
					},
					"response": []
				},
				{
					"name": "Step 6: Get Access Token as Postman Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if(jsonData.access_token && jsonData.access_token != \"\")",
									"{",
									"    pm.globals.set(\"adminAccessToken\", jsonData.access_token);",
									"}",
									"",
									"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
									"{",
									"    pm.globals.set(\"adminRefreshToken\", jsonData.refresh_token);",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains access_token\", function () {",
									"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"description": "The grant type required for the Resource Owner Password Credentials Grant.",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{postmanAdminUsername}}",
									"description": "Username for a ForgeRock demo user.",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{postmanAdminPassword}}",
									"description": "Password for a ForgeRock demo user.",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "fr:idm:*",
									"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{postmanAdminClientId}}",
									"description": "The ID of the Confidential OAuth Client.",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{postmanClientSecret}}",
									"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"oauth2{{realm}}",
								"access_token"
							]
						},
						"description": "Obtain an access token as the Postman Administrative User. Create this user in the `/alpha` realm, and ensure it has the `openidm-admin` authorization role."
					},
					"response": [
						{
							"name": "Example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"description": "The grant type required for the Resource Owner Password Credentials Grant.",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{postmanDemoUsername}}",
											"description": "Username for a ForgeRock demo user.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{postmanDemoPassword}}",
											"description": "Password for a ForgeRock demo user.",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "1570"
								},
								{
									"key": "Date",
									"value": "Thu, 13 Aug 2020 12:16:52 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJ0eXAiJ9.eyJzdWIiOiJkZPXXcM\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLC.eyl0VHJXpdhFiWDw\",\n    \"scope\": \"write\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
						}
					]
				},
				{
					"name": "Step 7: Create a Demo \"Alpha User\" Managed Identity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if(jsonData._id && jsonData._id != \"\"){",
									"    pm.globals.set(\"managedUserId\", jsonData._id);",
									"}",
									"if(jsonData.userName && jsonData.userName != \"\"){",
									"    pm.globals.set(\"managedUsername\", jsonData.userName);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userName\": \"{{postmanDemoUsername}}\",\n  \"sn\": \"Demo-User\",\n  \"givenName\": \"Postman\",\n  \"mail\": \"{{postmanDemoEmail}}\",\n  \"telephoneNumber\": \"{{$randomPhoneNumber}}\",\n  \"password\": \"{{postmanDemoPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{platformUrl}}/openidm/managed/alpha_user?_action=create",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"managed",
								"alpha_user"
							],
							"query": [
								{
									"key": "_action",
									"value": "create"
								}
							]
						},
						"description": "Create a demonstration `alpha_user` in the Alpha realm. A number of requests in the Postman Collection require this user to be present, for example the *Intelligent Access* section."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"user"
									],
									"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "This Postman Collection requires a number of prerequisites in order to function.\n\nEnsure you have completed these steps at least once for each new Identity Cloud instance you connect to with the collection.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Intelligent Access",
			"item": [
				{
					"name": "Step 1: Request Callbacks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"  ",
									"  // Determine next request based on detected callbacks",
									"  frUtils.detectCallbacks(responseBody);",
									"}",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `demoSSOToken` variable",
									"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
									"  ",
									"  // Skip to session info request",
									"  postman.setNextRequest(\"Step 3: Get Session Info\");",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200.\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId or authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=2.0, protocol=1.0",
								"description": "Specifies the version of the `/json/authenticate` endpoint to use."
							}
						],
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexValue={{loginJourney}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service",
									"disabled": true
								},
								{
									"key": "authIndexValue",
									"value": "{{loginJourney}}"
								}
							]
						},
						"description": "The first step is to make a POST call to the `/json/authenticate` endpoint, without providing any credentials, or cookies.\n\nDepending on how complex the authentication journey is, AM may return several callbacks sequentially. Each must be completed and returned to AM until authentication is successful.\n\nEach request that is part of the authentication journey uses the same `authId` value to track progress. Ensure the `authId` JWT is sent in each subsequent request, until a session token is issued.\n\nFor the next step, choose the appropriate request to complete the callback that was returned."
					},
					"response": [
						{
							"name": "Success. Callback generated by Username and Password collectors, together in a page node.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "2153"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 12:01:51 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"authId\": \"eyJ0eXAizI1NiJ9...eyJTkNVS-36NdGPz0ldtTxs\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Step 2a: Handle Username / Password Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"  ",
									"  // Determine next request based on detected callbacks",
									"  frUtils.detectCallbacks(responseBody);",
									"}",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `demoSSOToken` variable",
									"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.globals.unset(\"authId\");",
									"  ",
									"  // Skip to session info request",
									"  postman.setNextRequest(\"Step 3: Get Session Info\");",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId or authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=2.0, protocol=1.0",
								"description": "Specifies the version of the `/json/authenticate` endpoint to use."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service",
									"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
								},
								{
									"key": "authIndexValue",
									"value": "{{loginJourney}}",
									"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
								}
							]
						},
						"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to the `NameCallback` and `PasswordCallback` callbacks."
					},
					"response": [
						{
							"name": "Success - authentication complete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=0_OKRrdKWp4qNlomyaBn3lRl23U.*AAJTSQACMDEAAlNLABxiNmZiTnVSV05IbUFNbWprV3ZndUlNdlVYNDg9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "167"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:08:53 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
						}
					]
				},
				{
					"name": "Step 2b: Handle Validated Username / Password Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"  ",
									"  // Determine next request based on detected callbacks",
									"  frUtils.detectCallbacks(responseBody);",
									"}",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `demoSSOToken` variable",
									"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.globals.unset(\"authId\");",
									"  ",
									"  // Skip to session info request",
									"  postman.setNextRequest(\"Step 3: Get Session Info\");",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId or authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.1, protocol=1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ValidatedCreateUsernameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"policies\",\n                    \"value\": {}\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Username\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                },\n                {\n                    \"name\": \"IDToken1validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"ValidatedCreatePasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"echoOn\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {}\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                },\n                {\n                    \"name\": \"IDToken2validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service",
									"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
								},
								{
									"key": "authIndexValue",
									"value": "{{loginJourney}}",
									"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
								}
							]
						},
						"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to the `ValidatedCreateUsernameCallback` and `ValidatedCreatePasswordCallback` callbacks."
					},
					"response": [
						{
							"name": "Success - authentication complete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=0_OKRrdKWp4qNlomyaBn3lRl23U.*AAJTSQACMDEAAlNLABxiNmZiTnVSV05IbUFNbWprV3ZndUlNdlVYNDg9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "167"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:08:53 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
						}
					]
				},
				{
					"name": "Step 2c: Handle Choice Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"  ",
									"  // Determine next request based on detected callbacks",
									"  frUtils.detectCallbacks(responseBody);",
									"}",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `demoSSOToken` variable",
									"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.globals.unset(\"authId\");",
									"  ",
									"  // Skip to session info request",
									"  postman.setNextRequest(\"Step 3: Get Session Info\");",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId or authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=2.0, protocol=1.0",
								"description": "Specifies the version of the `/json/authenticate` endpoint to use."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ChoiceCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Succeed?\"\n                },\n                {\n                    \"name\": \"choices\",\n                    \"value\": [\n                        \"Yes\",\n                        \"No\"\n                    ]\n                },\n                {\n                    \"name\": \"defaultChoice\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service",
									"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
								},
								{
									"key": "authIndexValue",
									"value": "{{loginJourney}}",
									"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
								}
							]
						},
						"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to the `ChoiceCallback` callback."
					},
					"response": [
						{
							"name": "Success - authentication complete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ChoiceCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Succeed?\"\n                },\n                {\n                    \"name\": \"choices\",\n                    \"value\": [\n                        \"Yes\",\n                        \"No\"\n                    ]\n                },\n                {\n                    \"name\": \"defaultChoice\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=N60dPVcmOADQN170-8799pcqVVI.*AAJTSQACMDEAAlNLABw5QThIM0ZJd3RKcmNyWWYxSzlPaGhzcllsUXM9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "167"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:10:41 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
						}
					]
				},
				{
					"name": "Step 2d: Handle Text Input Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"  ",
									"  // Determine next request based on detected callbacks",
									"  frUtils.detectCallbacks(responseBody);",
									"}",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `demoSSOToken` variable",
									"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.globals.unset(\"authId\");",
									"  ",
									"  // Skip to session info request",
									"  postman.setNextRequest(\"Step 3: Get Session Info\");",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId or authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=2.0, protocol=1.0",
								"description": "Specifies the version of the `/json/authenticate` endpoint to use."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"TextInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Enter a word:\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{$randomLoremWord}}\"\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service",
									"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
								},
								{
									"key": "authIndexValue",
									"value": "{{loginJourney}}",
									"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
								}
							]
						},
						"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to a `TextInputCallback`."
					},
					"response": [
						{
							"name": "Success - authentication complete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ChoiceCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Succeed?\"\n                },\n                {\n                    \"name\": \"choices\",\n                    \"value\": [\n                        \"Yes\",\n                        \"No\"\n                    ]\n                },\n                {\n                    \"name\": \"defaultChoice\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=N60dPVcmOADQN170-8799pcqVVI.*AAJTSQACMDEAAlNLABw5QThIM0ZJd3RKcmNyWWYxSzlPaGhzcllsUXM9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "167"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:10:41 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
						}
					]
				},
				{
					"name": "Step 2e: Handle Device Profile Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"  ",
									"  // Determine next request based on detected callbacks",
									"  frUtils.detectCallbacks(responseBody);",
									"}",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `demoSSOToken` variable",
									"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.globals.unset(\"authId\");",
									"  ",
									"  // Skip to session info request",
									"  postman.setNextRequest(\"Step 3: Get Session Info\");",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId or authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=2.0, protocol=1.0",
								"description": "Specifies the version of the `/json/authenticate` endpoint to use."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"DeviceProfileCallback\",\n            \"output\": [\n                {\n                    \"name\": \"metadata\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"location\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"message\",\n                    \"value\": \"Collecting.....\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{\\r\\n   \\\"identifier\\\":\\\"aec3fe784...o3Xjiizyb9=\\\",\\r\\n   \\\"alias\\\":\\\"Example Pixel 3 XL\\\",\\r\\n   \\\"metadata\\\":{\\r\\n      \\\"platform\\\":{\\r\\n         \\\"platform\\\":\\\"Android\\\",\\r\\n         \\\"version\\\":28,\\r\\n         \\\"device\\\":\\\"generic_x86_arm\\\",\\r\\n         \\\"deviceName\\\":\\\"AOSP on IA Emulator\\\",\\r\\n         \\\"model\\\":\\\"AOSP on IA Emulator\\\",\\r\\n         \\\"brand\\\":\\\"google\\\",\\r\\n         \\\"locale\\\":\\\"en_US\\\",\\r\\n         \\\"timeZone\\\":\\\"America\\/Vancouver\\\",\\r\\n         \\\"jailBreakScore\\\":1\\r\\n      },\\r\\n      \\\"hardware\\\":{\\r\\n         \\\"hardware\\\":\\\"ranchu\\\",\\r\\n         \\\"manufacturer\\\":\\\"Google\\\",\\r\\n         \\\"storage\\\":774,\\r\\n         \\\"memory\\\":1494,\\r\\n         \\\"cpu\\\":4,\\r\\n         \\\"display\\\":{\\r\\n            \\\"width\\\":1440,\\r\\n            \\\"height\\\":2621,\\r\\n            \\\"orientation\\\":1\\r\\n         },\\r\\n         \\\"camera\\\":{\\r\\n            \\\"numberOfCameras\\\":2\\r\\n         }\\r\\n      },\\r\\n      \\\"browser\\\":{\\r\\n         \\\"agent\\\":\\\"Dalvik\\/2.1.0 (Linux; U; Android 9; AOSP on IA Emulator Build\\/PSR1.180720.117)\\\"\\r\\n      },\\r\\n      \\\"bluetooth\\\":{\\r\\n         \\\"supported\\\":false\\r\\n      },\\r\\n      \\\"network\\\":{\\r\\n         \\\"connected\\\":true\\r\\n      },\\r\\n      \\\"telephony\\\":{\\r\\n         \\\"networkCountryIso\\\":\\\"us\\\",\\r\\n         \\\"carrierName\\\":\\\"Android\\\"\\r\\n      }\\r\\n   },\\r\\n   \\\"location\\\":{\\r\\n      \\\"latitude\\\":{{$randomLatitude}},\\r\\n      \\\"Longitude\\\":{{$randomLongitude}}\\r\\n   }\\r\\n}\"\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service",
									"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
								},
								{
									"key": "authIndexValue",
									"value": "{{loginJourney}}",
									"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
								}
							]
						},
						"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to a `DeviceProfileCallback`.\n\nThe example data in the request body represents a Google Android emulator device."
					},
					"response": [
						{
							"name": "Success - authentication complete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ChoiceCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Succeed?\"\n                },\n                {\n                    \"name\": \"choices\",\n                    \"value\": [\n                        \"Yes\",\n                        \"No\"\n                    ]\n                },\n                {\n                    \"name\": \"defaultChoice\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=N60dPVcmOADQN170-8799pcqVVI.*AAJTSQACMDEAAlNLABw5QThIM0ZJd3RKcmNyWWYxSzlPaGhzcllsUXM9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "167"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:10:41 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
						}
					]
				},
				{
					"name": "Step 2f: Handle Progressive Profile Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"  ",
									"  // Determine next request based on detected callbacks",
									"  frUtils.detectCallbacks(responseBody);",
									"}",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `demoSSOToken` variable",
									"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.globals.unset(\"authId\");",
									"  ",
									"  // Skip to session info request",
									"  postman.setNextRequest(\"Step 3: Get Session Info\");",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId or authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.0, protocol=1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"BooleanAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"preferences/updates\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Send me news and updates\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {}\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": false\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"IDToken1validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 2\n        },\n        {\n            \"type\": \"BooleanAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"preferences/marketing\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Send me special offers and services\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {}\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": false\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"IDToken2validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 3\n        }\n    ],\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service",
									"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
								},
								{
									"key": "authIndexValue",
									"value": "{{loginJourney}}",
									"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
								}
							]
						},
						"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to `BooleanAttributeInputCallback` callbacks used by the *Progressive Profiling* nodes."
					},
					"response": [
						{
							"name": "Success - authentication complete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ChoiceCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Succeed?\"\n                },\n                {\n                    \"name\": \"choices\",\n                    \"value\": [\n                        \"Yes\",\n                        \"No\"\n                    ]\n                },\n                {\n                    \"name\": \"defaultChoice\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=N60dPVcmOADQN170-8799pcqVVI.*AAJTSQACMDEAAlNLABw5QThIM0ZJd3RKcmNyWWYxSzlPaGhzcllsUXM9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "167"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:10:41 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
						}
					]
				},
				{
					"name": "Step 3: Get Session Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "{{cookieName}}",
								"value": "{{demoSSOToken}}",
								"description": "Specifies the session token to query. To obtain information about a different token, specify it in the `tokenId` parameter of the POST body."
							},
							{
								"description": "Specifies the version of the `/json/sessions` endpoint to use.",
								"key": "Accept-API-Version",
								"type": "text",
								"value": "resource=2.0, protocol=1.0"
							}
						],
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/sessions?_action=getSessionInfo",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"sessions"
							],
							"query": [
								{
									"key": "_action",
									"value": "getSessionInfo",
									"description": "Specifies a request to get information about a session, such as idle times."
								}
							]
						},
						"description": "Once the user has completed all the required callbacks, they are issued their session token. You can use the token to obtain information about the session.\n\nTo obtain information about a session, perform an HTTP POST to the `/json/sessions/` endpoint, using the `getSessionInfo` action. \n\nThe endpoint returns information about the provided session token by default. \n\n> Tip: \n>\n> To get information about a different session token, include it in the POST body, as the value of the `tokenId` parameter."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{demoSSOToken}}",
										"description": "Specifies the session token to query. To obtain information about a different token, specify it in the `tokenId` parameter of the POST body."
									},
									{
										"description": "Specifies the version of the `/json/sessions` endpoint to use.",
										"key": "Accept-API-Version",
										"type": "text",
										"value": "resource=2.0, protocol=1.0"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions?_action=getSessionInfo",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"query": [
										{
											"key": "_action",
											"value": "getSessionInfo",
											"description": "Specifies a request to get information about a session, such as idle times."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.2"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "302"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:23:25 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"username\": \"demo\",\n    \"universalId\": \"id=demo,ou=user,dc=openam,dc=forgerock,dc=org\",\n    \"realm\": \"/\",\n    \"latestAccessTime\": \"2020-08-12T14:23:23Z\",\n    \"maxIdleExpirationTime\": \"2020-08-12T14:53:23Z\",\n    \"maxSessionExpirationTime\": \"2020-08-12T16:23:22Z\",\n    \"properties\": {\n        \"AMCtxId\": \"e2fe9cef-dce1-41e4-ab15-0c85a88bf8cd-66167\"\n    }\n}"
						}
					]
				},
				{
					"name": "Step 4: Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Stop running the collection",
									"postman.setNextRequest(null);",
									"pm.globals.unset(\"authId\");",
									"pm.globals.unset(\"demoSSOToken\");",
									"",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200.\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains expected JSON.\", function () {",
									"    pm.expect(pm.response.to.have.jsonBody(\"result\",\"Successfully logged out\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies the session token to log out. To terminate a different session, specify its session token in the `tokenId` parameter of the POST body.",
								"key": "{{cookieName}}",
								"value": "{{demoSSOToken}}"
							},
							{
								"description": "Specifies the version of the /json/sessions endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=3.1, protocol=1.0"
							}
						],
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/sessions/?_action=logout",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"sessions",
								""
							],
							"query": [
								{
									"key": "_action",
									"value": "logout",
									"description": "Specifies a request to log out, or invalidate, a session."
								}
							]
						},
						"description": "To invalidate, or log out a session, perform an HTTP POST to the `/json/sessions/` endpoint using the `logout` action. \n\nThe endpoint invalidates the session identified by the provided session token.\n\n> Tip:\n>\n> To invalidate a different session token, include it in the POST body as the value of the `tokenId` parameter."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "iplanetDirectoryPro",
										"value": "{{demoSSOToken}}",
										"description": "Specifies the session token to log out. To obtain information about a different token, specify it in the `tokenId` parameter of the POST body."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"description": "Specifies the version of the /json/sessions endpoint to use."
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions/?_action=logout",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout",
											"description": "Specifies a request to log out, or invalidate, a session."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=3.2"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=\"\"; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=LOGOUT; Expires=Thu, 01 Jan 1970 00:00:10 GMT; Path=/; Domain=example.com"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "36"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:23:45 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"result\": \"Successfully logged out\"\n}"
						}
					]
				}
			],
			"description": "The `/json/authenticate` endpoint supports callback mechanisms to perform complex authentication journeys. Whenever AM needs to return or request information, it will return a JSON object with the authentication step, the authentication identifier, and the related callbacks.\n\nThe following types of callbacks are available:\n\n - Read-only callbacks. AM uses read-only callbacks to provide information to the user, such as text messages or the amount of time that the user needs to wait before continuing their authentication journey.\n - Interactive callbacks. AM uses interactive callbacks ask the user for information. For example, to request their user name and password, or to request that the user chooses between different options.\n - Backchannel callbacks. AM uses backchannel callbacks when it needs to access additional information from the user's request. For example, when it requires a particular header or a certificate. \n\nRead-only and interactive callbacks have an array of output elements suitable for displaying to the end user. The JSON returned in interactive callbacks also contains an array of input elements, which must be completed and returned to AM."
		},
		{
			"name": "User Self-service",
			"item": [
				{
					"name": "Registration",
					"item": [
						{
							"name": "Step 1: Request \"Registration\" Journey Callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.globals.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=Registration",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "Registration",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								},
								"description": "The first step is to make a POST call to the `/json/authenticate` endpoint, without providing any credentials, or cookies.\n\nThe ForgeRock Identity Cloud provides a *Registration* journey out-of-the-box, which is specified in this request.\n\nEach request that is part of the registration journey uses the same `authId` value to track progress. Ensure the `authId` JWT is sent in each subsequent request, until a session token is issued."
							},
							"response": [
								{
									"name": "Success. Callback generated by Username and Password collectors, together in a page node.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "2153"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 12:01:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"authId\": \"eyJ0eXAizI1NiJ9...eyJTkNVS-36NdGPz0ldtTxs\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Step 2: Handle \"Registration\" Journey Callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"",
											"  // Remove `authId` variable",
											"  pm.globals.unset(\"authId\");",
											"  ",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"myRandomUsername\", pm.variables.replaceIn('{{$randomUserName}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ValidatedCreateUsernameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"policies\",\n                    \"value\": {\n                        \"policyRequirements\": [\n                            \"REQUIRED\",\n                            \"MIN_LENGTH\",\n                            \"VALID_TYPE\",\n                            \"VALID_USERNAME\",\n                            \"CANNOT_CONTAIN_CHARACTERS\",\n                            \"MAX_LENGTH\"\n                        ],\n                        \"fallbackPolicies\": null,\n                        \"name\": \"userName\",\n                        \"policies\": [\n                            {\n                                \"policyRequirements\": [\n                                    \"REQUIRED\"\n                                ],\n                                \"policyId\": \"required\"\n                            },\n                            {\n                                \"policyRequirements\": [\n                                    \"REQUIRED\"\n                                ],\n                                \"policyId\": \"not-empty\"\n                            },\n                            {\n                                \"policyRequirements\": [\n                                    \"MIN_LENGTH\"\n                                ],\n                                \"policyId\": \"minimum-length\",\n                                \"params\": {\n                                    \"minLength\": 1\n                                }\n                            },\n                            {\n                                \"policyRequirements\": [\n                                    \"VALID_TYPE\"\n                                ],\n                                \"policyId\": \"valid-type\",\n                                \"params\": {\n                                    \"types\": [\n                                        \"string\"\n                                    ]\n                                }\n                            },\n                            {\n                                \"policyId\": \"valid-username\",\n                                \"policyRequirements\": [\n                                    \"VALID_USERNAME\"\n                                ]\n                            },\n                            {\n                                \"policyId\": \"cannot-contain-characters\",\n                                \"params\": {\n                                    \"forbiddenChars\": [\n                                        \"/\"\n                                    ]\n                                },\n                                \"policyRequirements\": [\n                                    \"CANNOT_CONTAIN_CHARACTERS\"\n                                ]\n                            },\n                            {\n                                \"policyId\": \"minimum-length\",\n                                \"params\": {\n                                    \"minLength\": 1\n                                },\n                                \"policyRequirements\": [\n                                    \"MIN_LENGTH\"\n                                ]\n                            },\n                            {\n                                \"policyId\": \"maximum-length\",\n                                \"params\": {\n                                    \"maxLength\": 255\n                                },\n                                \"policyRequirements\": [\n                                    \"MAX_LENGTH\"\n                                ]\n                            }\n                        ],\n                        \"conditionalPolicies\": null\n                    }\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Username\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{myRandomUsername}}\"\n                },\n                {\n                    \"name\": \"IDToken1validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"StringAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"givenName\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"First Name\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {\n                        \"policyRequirements\": [\n                            \"REQUIRED\",\n                            \"VALID_TYPE\"\n                        ],\n                        \"fallbackPolicies\": null,\n                        \"name\": \"givenName\",\n                        \"policies\": [\n                            {\n                                \"policyRequirements\": [\n                                    \"REQUIRED\"\n                                ],\n                                \"policyId\": \"required\"\n                            },\n                            {\n                                \"policyRequirements\": [\n                                    \"VALID_TYPE\"\n                                ],\n                                \"policyId\": \"valid-type\",\n                                \"params\": {\n                                    \"types\": [\n                                        \"string\"\n                                    ]\n                                }\n                            }\n                        ],\n                        \"conditionalPolicies\": null\n                    }\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": \"\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"Postman\"\n                },\n                {\n                    \"name\": \"IDToken2validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 1\n        },\n        {\n            \"type\": \"StringAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"sn\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Last Name\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {\n                        \"policyRequirements\": [\n                            \"REQUIRED\",\n                            \"VALID_TYPE\"\n                        ],\n                        \"fallbackPolicies\": null,\n                        \"name\": \"sn\",\n                        \"policies\": [\n                            {\n                                \"policyRequirements\": [\n                                    \"REQUIRED\"\n                                ],\n                                \"policyId\": \"required\"\n                            },\n                            {\n                                \"policyRequirements\": [\n                                    \"VALID_TYPE\"\n                                ],\n                                \"policyId\": \"valid-type\",\n                                \"params\": {\n                                    \"types\": [\n                                        \"string\"\n                                    ]\n                                }\n                            }\n                        ],\n                        \"conditionalPolicies\": null\n                    }\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": \"\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken3\",\n                    \"value\": \"Self-Service-User\"\n                },\n                {\n                    \"name\": \"IDToken3validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 2\n        },\n        {\n            \"type\": \"StringAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"mail\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Email Address\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {\n                        \"policyRequirements\": [\n                            \"REQUIRED\",\n                            \"VALID_TYPE\",\n                            \"VALID_EMAIL_ADDRESS_FORMAT\"\n                        ],\n                        \"fallbackPolicies\": null,\n                        \"name\": \"mail\",\n                        \"policies\": [\n                            {\n                                \"policyRequirements\": [\n                                    \"REQUIRED\"\n                                ],\n                                \"policyId\": \"required\"\n                            },\n                            {\n                                \"policyRequirements\": [\n                                    \"VALID_TYPE\"\n                                ],\n                                \"policyId\": \"valid-type\",\n                                \"params\": {\n                                    \"types\": [\n                                        \"string\"\n                                    ]\n                                }\n                            },\n                            {\n                                \"policyId\": \"valid-email-address-format\",\n                                \"policyRequirements\": [\n                                    \"VALID_EMAIL_ADDRESS_FORMAT\"\n                                ]\n                            }\n                        ],\n                        \"conditionalPolicies\": null\n                    }\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": \"\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken4\",\n                    \"value\": \"{{myRandomUsername}}@selfservice.example.com\"\n                },\n                {\n                    \"name\": \"IDToken4validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 3\n        },\n        {\n            \"type\": \"BooleanAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"preferences/marketing\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Send me special offers and services\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {}\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": false\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken5\",\n                    \"value\": {{$randomBoolean}}\n                },\n                {\n                    \"name\": \"IDToken5validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 4\n        },\n        {\n            \"type\": \"BooleanAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"preferences/updates\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Send me news and updates\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {}\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": false\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken6\",\n                    \"value\": {{$randomBoolean}}\n                },\n                {\n                    \"name\": \"IDToken6validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 5\n        },\n        {\n            \"type\": \"ValidatedCreatePasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"echoOn\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {\n                        \"policyRequirements\": [\n                            \"REQUIRED\",\n                            \"MIN_LENGTH\",\n                            \"VALID_TYPE\",\n                            \"AT_LEAST_X_CAPITAL_LETTERS\",\n                            \"AT_LEAST_X_NUMBERS\",\n                            \"CANNOT_CONTAIN_OTHERS\"\n                        ],\n                        \"fallbackPolicies\": null,\n                        \"name\": \"password\",\n                        \"policies\": [\n                            {\n                                \"policyRequirements\": [\n                                    \"REQUIRED\"\n                                ],\n                                \"policyId\": \"not-empty\"\n                            },\n                            {\n                                \"policyRequirements\": [\n                                    \"MIN_LENGTH\"\n                                ],\n                                \"policyId\": \"minimum-length\",\n                                \"params\": {\n                                    \"minLength\": 8\n                                }\n                            },\n                            {\n                                \"policyRequirements\": [\n                                    \"VALID_TYPE\"\n                                ],\n                                \"policyId\": \"valid-type\",\n                                \"params\": {\n                                    \"types\": [\n                                        \"string\"\n                                    ]\n                                }\n                            },\n                            {\n                                \"policyId\": \"at-least-X-capitals\",\n                                \"params\": {\n                                    \"numCaps\": 1\n                                },\n                                \"policyRequirements\": [\n                                    \"AT_LEAST_X_CAPITAL_LETTERS\"\n                                ]\n                            },\n                            {\n                                \"policyId\": \"at-least-X-numbers\",\n                                \"params\": {\n                                    \"numNums\": 1\n                                },\n                                \"policyRequirements\": [\n                                    \"AT_LEAST_X_NUMBERS\"\n                                ]\n                            },\n                            {\n                                \"policyId\": \"cannot-contain-others\",\n                                \"params\": {\n                                    \"disallowedFields\": [\n                                        \"userName\",\n                                        \"givenName\",\n                                        \"sn\"\n                                    ]\n                                },\n                                \"policyRequirements\": [\n                                    \"CANNOT_CONTAIN_OTHERS\"\n                                ]\n                            }\n                        ],\n                        \"conditionalPolicies\": null\n                    }\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken7\",\n                    \"value\": \"Password1!\"\n                },\n                {\n                    \"name\": \"IDToken7validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 6\n        },\n        {\n            \"type\": \"KbaCreateCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Select a security question\"\n                },\n                {\n                    \"name\": \"predefinedQuestions\",\n                    \"value\": [\n                        \"What's your favorite color?\"\n                    ]\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken8question\",\n                    \"value\": \"What's your favorite color?\"\n                },\n                {\n                    \"name\": \"IDToken8answer\",\n                    \"value\": \"Cornflower Blue\"\n                }\n            ],\n            \"_id\": 7\n        },\n        {\n            \"type\": \"TermsAndConditionsCallback\",\n            \"output\": [\n                {\n                    \"name\": \"version\",\n                    \"value\": \"0.0\"\n                },\n                {\n                    \"name\": \"terms\",\n                    \"value\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n                },\n                {\n                    \"name\": \"createDate\",\n                    \"value\": \"2019-10-28T04:20:11.320Z\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken9\",\n                    \"value\": true\n                }\n            ],\n            \"_id\": 8\n        }\n    ],\n    \"header\": \"Sign Up\",\n    \"description\": \"Signing up is fast and easy.<br>Already have an account? <a href='#/service/Login'>Sign In</a>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=Registration",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "Registration",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								},
								"description": "Respond to the callbacks of the *Registration* journey.\n\nThe builtin *Registration* journey also authenticates the newly registered user and issues a session token."
							},
							"response": [
								{
									"name": "Success - authentication complete",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ChoiceCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Succeed?\"\n                },\n                {\n                    \"name\": \"choices\",\n                    \"value\": [\n                        \"Yes\",\n                        \"No\"\n                    ]\n                },\n                {\n                    \"name\": \"defaultChoice\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=N60dPVcmOADQN170-8799pcqVVI.*AAJTSQACMDEAAlNLABw5QThIM0ZJd3RKcmNyWWYxSzlPaGhzcllsUXM9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 14:10:41 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						}
					],
					"description": "Let non-authenticated users register to your site on their own. You can add additional security features like email verification, knowledge-based authentication (KBA) security questions, Google reCAPTCHA, and custom plugins to add to your User Self-Registration process. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Forgotten Username",
					"item": [
						{
							"name": "Step 1: Request \"ForgottenUsername\" Journey Callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.globals.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=ForgottenUsername",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "ForgottenUsername",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								},
								"description": "The first step is to make a POST call to the `/json/authenticate` endpoint, without providing any credentials, or cookies.\n\nThe ForgeRock Identity Cloud provides a *Forgotten Username* journey out-of-the-box, which is specified in this request.\n\nEach request that is part of the forgotten username journey uses the same `authId` value to track progress. Ensure the `authId` JWT is sent in each subsequent request, until a session token is issued."
							},
							"response": [
								{
									"name": "Success. Callback generated by Username and Password collectors, together in a page node.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "2153"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 12:01:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"authId\": \"eyJ0eXAizI1NiJ9...eyJTkNVS-36NdGPz0ldtTxs\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Step 2: Handle \"ForgottenUsername\" Journey Callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have another callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.globals.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `demoSSOToken` variable",
											"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.globals.unset(\"authId\");",
											"  ",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"StringAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"mail\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Email Address\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {}\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": \"\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoEmail}}\"\n                },\n                {\n                    \"name\": \"IDToken1validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 0\n        }\n    ],\n    \"header\": \"Sign Up\",\n    \"description\": \"Signing up is fast and easy.<br>Already have an account? <a href='#/service/Login'>Sign In</a>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=ForgottenUsername",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "ForgottenUsername",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								},
								"description": "Respond to the callbacks of the *Forgotten Username* journey, by providing the email address of the relevant user.\n\nThe builtin `ForgottenUsername` journey uses the Suspended Authentication feature, and sends the relevant user an email containing a \"magic link\".\n\nCopy the unique ID from the URL of that magic link, and use it in the next step to obtain the forgotten username."
							},
							"response": [
								{
									"name": "Success - authentication complete",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ChoiceCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Succeed?\"\n                },\n                {\n                    \"name\": \"choices\",\n                    \"value\": [\n                        \"Yes\",\n                        \"No\"\n                    ]\n                },\n                {\n                    \"name\": \"defaultChoice\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=N60dPVcmOADQN170-8799pcqVVI.*AAJTSQACMDEAAlNLABw5QThIM0ZJd3RKcmNyWWYxSzlPaGhzcllsUXM9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 14:10:41 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Resume Suspended Journey using Suspended ID from Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?suspendedId=suspended_id_from_email",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "suspendedId",
											"value": "suspended_id_from_email",
											"description": "Replace `suspended_id_from_email` with the unique code from the email that was sent to the user, if found in the Identity Store."
										}
									]
								},
								"description": "Replace `suspended_id_from_email` with the unique code from the email that was sent to the user. \n\nThe *Forgotten Username* journey will continue, and the username provided."
							},
							"response": [
								{
									"name": "Success. Callback generated by Username and Password collectors, together in a page node.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "2153"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 12:01:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"authId\": \"eyJ0eXAizI1NiJ9...eyJTkNVS-36NdGPz0ldtTxs\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "Lets users retrieve their forgotten usernames. If security questions are enabled, users must also correctly answer their pre-configured security questions before retrieving their usernames. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Reset Password",
					"item": [
						{
							"name": "Step 1: Request \"ResetPassword\" Journey Callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.globals.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=ResetPassword",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "ResetPassword",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								},
								"description": "The first step is to make a POST call to the `/json/authenticate` endpoint, without providing any credentials, or cookies.\n\nThe ForgeRock Identity Cloud provides a *Reset Password* journey out-of-the-box, which is specified in this request.\n\nEach request that is part of the reset password journey uses the same `authId` value to track progress. Ensure the `authId` JWT is sent in each subsequent request, until a session token is issued."
							},
							"response": [
								{
									"name": "Success. Callback generated by Username and Password collectors, together in a page node.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "2153"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 12:01:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"authId\": \"eyJ0eXAizI1NiJ9...eyJTkNVS-36NdGPz0ldtTxs\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Step 2: Handle \"ResetPassword\" Journey Callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have another callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.globals.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `demoSSOToken` variable",
											"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"  ",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"StringAttributeInputCallback\",\n            \"output\": [\n                {\n                    \"name\": \"name\",\n                    \"value\": \"mail\"\n                },\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Email Address\"\n                },\n                {\n                    \"name\": \"required\",\n                    \"value\": true\n                },\n                {\n                    \"name\": \"policies\",\n                    \"value\": {}\n                },\n                {\n                    \"name\": \"failedPolicies\",\n                    \"value\": []\n                },\n                {\n                    \"name\": \"validateOnly\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"value\",\n                    \"value\": \"\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{demoEmailAddress}}\"\n                },\n                {\n                    \"name\": \"IDToken1validateOnly\",\n                    \"value\": false\n                }\n            ],\n            \"_id\": 0\n        }\n    ],\n    \"header\": \"Sign Up\",\n    \"description\": \"Signing up is fast and easy.<br>Already have an account? <a href='#/service/Login'>Sign In</a>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=ResetPassword",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "ResetPassword",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								},
								"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to a `TextInputCallback`."
							},
							"response": [
								{
									"name": "Success - authentication complete",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"ChoiceCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Succeed?\"\n                },\n                {\n                    \"name\": \"choices\",\n                    \"value\": [\n                        \"Yes\",\n                        \"No\"\n                    ]\n                },\n                {\n                    \"name\": \"defaultChoice\",\n                    \"value\": 0\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=N60dPVcmOADQN170-8799pcqVVI.*AAJTSQACMDEAAlNLABw5QThIM0ZJd3RKcmNyWWYxSzlPaGhzcllsUXM9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 14:10:41 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Resume Suspended Journey using Suspended ID from Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId', 'authId');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?suspendedId=suspended_id_from_email",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "suspendedId",
											"value": "suspended_id_from_email",
											"description": "Replace `suspended_id_from_email` with the unique code from the email that was sent to the user, if found in the Identity Store."
										}
									]
								},
								"description": "Replace `suspended_id_from_email` with the unique code from the email that was sent to the user. \n\nThe *Reset Password* journey will continue, and allow the user to specify a new password, by completing callbacks as usual."
							},
							"response": [
								{
									"name": "Success. Callback generated by Username and Password collectors, together in a page node.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "2153"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 12:01:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"authId\": \"eyJ0eXAizI1NiJ9...eyJTkNVS-36NdGPz0ldtTxs\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "Lets registered users already in your system reset their passwords. The default password policy is set in the underlying directory server and requires a minimum password length of eight characters by default. If security questions are enabled, users must also correctly answer their pre-configured security questions before resetting their passwords.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "ForgeRock Identity Cloud provides user self-service features that lets your customers self-register to your web site, securely reset forgotten passwords, and retrieve their usernames.\n\nThese user self-service capabilities greatly reduce help desk costs and offers a rich online experience that strengthens customer loyalty. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Step 1: Start Authentication Journey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.globals.set(\"authId\", JSONResponse.authId);",
									"}",
									"",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200.\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains authId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('authId');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "The media type of the resource.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "This collection documents version 2.1 of the authentication resource.",
								"key": "Accept-API-Version",
								"value": "resource=2.1"
							}
						],
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service"
								},
								{
									"key": "authIndexValue",
									"value": "PasswordGrant"
								}
							]
						},
						"description": "To get started, log in to the authorization server using the credentials of the administator to receive an administrative SSO token needed for the following prerequisites. \n"
					},
					"response": []
				},
				{
					"name": "Step 2: Authenticate as \"Postman Demo User\" and Get Session Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `demoSSOToken` variable",
									"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.globals.unset(\"authId\");",
									"",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId\", function () {",
									"    pm.expect(JSONResponse).to.have.any.keys('tokenId');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.1, protocol=1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"authenticate"
							],
							"query": [
								{
									"key": "authIndexType",
									"value": "service"
								},
								{
									"key": "authIndexValue",
									"value": "PasswordGrant"
								}
							]
						},
						"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to the NameCallback and PasswordCallback callbacks.\n\nOverride the values in this response to the callbacks by using the `amDemoUsername` and `amDemoPassword` Postman variables."
					},
					"response": [
						{
							"name": "Success - authentication complete",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0",
										"description": "Specifies the version of the `/json/authenticate` endpoint to use."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
										},
										{
											"key": "authIndexValue",
											"value": "{{loginJourney}}",
											"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Set-Cookie",
									"value": "iPlanetDirectoryPro=0_OKRrdKWp4qNlomyaBn3lRl23U.*AAJTSQACMDEAAlNLABxiNmZiTnVSV05IbUFNbWprV3ZndUlNdlVYNDg9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Set-Cookie",
									"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
								},
								{
									"key": "Content-API-Version",
									"value": "resource=2.1"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "167"
								},
								{
									"key": "Date",
									"value": "Wed, 12 Aug 2020 14:08:53 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
						}
					]
				},
				{
					"name": "Step 3: Get Users' Session Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "Accept-API-Version",
								"value": "resource=4.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "{{cookieName}}",
								"type": "text",
								"value": "{{demoSSOToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/sessions?_prettyPrint=true&_action=getsessioninfo",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"sessions"
							],
							"query": [
								{
									"key": "_fields",
									"value": "",
									"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
									"disabled": true
								},
								{
									"key": "_prettyPrint",
									"value": "true",
									"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
								},
								{
									"key": "_action",
									"value": "getsessioninfo"
								}
							]
						},
						"description": "It reads and returns the information about the requested session."
					},
					"response": [
						{
							"name": "It happens when when the SSO header is missing in the request or user token is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_getsessioninfo?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_getsessioninfo?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_getsessioninfo?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_getsessioninfo?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Step 4: Get Users' Session Info and Reset Idle Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "Accept-API-Version",
								"value": "resource=4.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "{{cookieName}}",
								"type": "text",
								"value": "{{demoSSOToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/sessions?_prettyPrint=true&_action=getsessioninfoandresetidletime",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"sessions"
							],
							"query": [
								{
									"key": "_fields",
									"value": "",
									"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
									"disabled": true
								},
								{
									"key": "_prettyPrint",
									"value": "true",
									"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
								},
								{
									"key": "_action",
									"value": "getsessioninfoandresetidletime"
								}
							]
						},
						"description": "It reads and returns the information about the requested session. It also resets the session idle time."
					},
					"response": [
						{
							"name": "It happens when when the SSO header is missing in the request or user token is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_getsessioninfoandresetidletime?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_getsessioninfoandresetidletime?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_getsessioninfoandresetidletime?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_getsessioninfoandresetidletime?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Step 5: Get Users' Session Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "Accept-API-Version",
								"value": "resource=4.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "{{cookieName}}",
								"type": "text",
								"value": "{{demoSSOToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/sessions?_prettyPrint=true&_action=getsessionproperties",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"sessions"
							],
							"query": [
								{
									"key": "_fields",
									"value": "",
									"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
									"disabled": true
								},
								{
									"key": "_prettyPrint",
									"value": "true",
									"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
								},
								{
									"key": "_action",
									"value": "getsessionproperties"
								}
							]
						},
						"description": "It reads and returns all of the whitelisted properties for the requested session."
					},
					"response": [
						{
							"name": "It happens when when the SSO header is missing in the request or user token is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_getsessionproperties?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_getsessionproperties?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_getsessionproperties?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_getsessionproperties?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Step 6: Refresh Users' Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "Accept-API-Version",
								"type": "text",
								"value": "resource=4.0"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "{{cookieName}}",
								"type": "text",
								"value": "{{demoSSOToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/sessions?_prettyPrint=true&_action=refresh",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"sessions"
							],
							"query": [
								{
									"key": "_fields",
									"value": "",
									"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
									"disabled": true
								},
								{
									"key": "_prettyPrint",
									"value": "true",
									"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
								},
								{
									"key": "_action",
									"value": "refresh"
								}
							]
						},
						"description": "Suggests to OpenAM that it should refresh this session (update it's latest access time and reset its idleTime to 0). This will only be obeyed if the time between the session's previous latest access time and now is greater than the value configured for the server's Latest Access Time Update Frequency setting, which defaults to 60 seconds."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_refresh?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_refresh?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "It happens when when the SSO header is missing in the request or user token is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_refresh?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_refresh?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
						}
					]
				},
				{
					"name": "Step 7: Validate Users' Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Session is valid\", function () {",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response has expected data\", function () {",
									"    pm.expect(jsonData).to.have.all.keys('valid','sessionUid','uid','realm');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "Accept-API-Version",
								"value": "resource=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "{{cookieName}}",
								"value": "{{demoSSOToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/sessions?_prettyPrint=true&_action=validate",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"sessions"
							],
							"query": [
								{
									"key": "_fields",
									"value": "",
									"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
									"disabled": true
								},
								{
									"key": "_prettyPrint",
									"value": "true",
									"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
								},
								{
									"key": "_action",
									"value": "validate"
								}
							]
						},
						"description": "It checks that the specified SSO Token Id is valid or not. If there is any problem getting or validating the token which causes an exception the json response will be false. In addition if the token is expired then the json response will be set to false. Otherwise it will be set to true."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_validate?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_validate?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "It happens when when the SSO header is missing in the request or user token is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_validate?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_validate?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
						}
					]
				},
				{
					"name": "Step 8. Logout Users' Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"User was logged out\", function () {",
									"    pm.expect(jsonData.result).to.eql(\"Successfully logged out\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) ",
								"key": "Accept-API-Version",
								"value": "resource=4.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "{{cookieName}}",
								"type": "text",
								"value": "{{demoSSOToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{amUrl}}/json{{realm}}/sessions?_prettyPrint=true&_action=logout",
							"host": [
								"{{amUrl}}"
							],
							"path": [
								"json{{realm}}",
								"sessions"
							],
							"query": [
								{
									"key": "_fields",
									"value": "",
									"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
									"disabled": true
								},
								{
									"key": "_prettyPrint",
									"value": "true",
									"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
								},
								{
									"key": "_action",
									"value": "logout",
									"description": "(Required) "
								}
							]
						},
						"description": "It does logout from OpenAM"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_logout?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_logout?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "It happens when when the SSO header is missing in the request or user token is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tokenId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_logout?&_prettyPrint=true&_action=<string>",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"hash": "4.0_action_logout?&_prettyPrint=true&_action=<string>"
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
						}
					]
				}
			],
			"description": "When a user authenticates to the ForgeRock Identity Cloud, they are issues with a session token.\n\nYou can obtain information about a users' session, and terminate it, which represents the user logging out of your service.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Identity Profiles",
			"item": [
				{
					"name": "Authenticate as \"Postman Demo User\"",
					"item": [
						{
							"name": "Step 1: Start Authentication Journey Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.globals.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('authId');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service"
										},
										{
											"key": "authIndexValue",
											"value": "PasswordGrant"
										}
									]
								},
								"description": "To get started, log in to the authorization server using the credentials of the administator to receive an administrative SSO token needed for the following prerequisites. \n"
							},
							"response": []
						},
						{
							"name": "Step 2: Authenticate as \"Postman Demo User\" and Get Session Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `demoSSOToken` variable",
											"  pm.globals.set(\"demoSSOToken\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.globals.unset(\"authId\");",
											"",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('tokenId');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service",
											"disabled": true
										},
										{
											"key": "authIndexValue",
											"value": "PasswordGrant",
											"disabled": true
										}
									]
								},
								"description": "To respond to a callback, send back the whole JSON object with the missing `input` values filled.\n\nThis request shows how to respond to the NameCallback and PasswordCallback callbacks.\n\nOverride the values in this response to the callbacks by using the `amDemoUsername` and `amDemoPassword` Postman variables."
							},
							"response": [
								{
									"name": "Success - authentication complete",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.0, protocol=1.0",
												"description": "Specifies the version of the `/json/authenticate` endpoint to use."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{postmanDemoUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{postmanDemoPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue={{loginJourney}}",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											],
											"query": [
												{
													"key": "authIndexType",
													"value": "service",
													"description": "Allows the request to configure the service (for example, an authentication tree) to use for this request."
												},
												{
													"key": "authIndexValue",
													"value": "{{loginJourney}}",
													"description": "Specifies the name of the service to use for this request.\nOverride this value using the `amAuthenticationTree` Postman variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=0_OKRrdKWp4qNlomyaBn3lRl23U.*AAJTSQACMDEAAlNLABxiNmZiTnVSV05IbUFNbWprV3ZndUlNdlVYNDg9AAR0eXBlAANDVFMAAlMxAAA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Aug 2020 14:08:53 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"N60dPV99pcqVVI.*AAJTSQACMDEAAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Get Users' ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return session info Token?",
											"if(JSONResponse.username && JSONResponse.username != \"\")",
											"{",
											"  // Set `demoSSOToken` variable",
											"  pm.globals.set(\"demoUserId\", JSONResponse.username);",
											"",
											"}",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=4.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "{{cookieName}}",
										"type": "text",
										"value": "{{demoSSOToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/sessions?_prettyPrint=true&_action=getsessioninfo",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"sessions"
									],
									"query": [
										{
											"key": "_fields",
											"value": "",
											"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
											"disabled": true
										},
										{
											"key": "_prettyPrint",
											"value": "true",
											"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
										},
										{
											"key": "_action",
											"value": "getsessioninfo"
										}
									]
								},
								"description": "It reads and returns the information about the requested session."
							},
							"response": [
								{
									"name": "It happens when when the SSO header is missing in the request or user token is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tokenId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_getsessioninfo?&_prettyPrint=true&_action=<string>",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"sessions"
											],
											"hash": "4.0_action_getsessioninfo?&_prettyPrint=true&_action=<string>"
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tokenId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/sessions#4.0_action_getsessioninfo?&_prettyPrint=true&_action=<string>",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"sessions"
											],
											"hash": "4.0_action_getsessioninfo?&_prettyPrint=true&_action=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Authorized OAuth 2.0 Clients",
					"item": [
						{
							"name": "Step 1: Query Users' OAuth 2.0 Clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request contain results?",
											"if(JSONResponse.resultCount && JSONResponse.resultCount > 0)",
											"{",
											"  // Set `demoSSOToken` variable",
											"  pm.globals.set(\"oauth2App\", JSONResponse.result[0]._id);",
											"}",
											"else",
											"{",
											"  pm.globals.set(\"oauth2App\", \"none_found\");  ",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains resultCount\", function () {",
											"    pm.expect(JSONResponse.resultCount).to.be.a(\"number\");",
											"});",
											"",
											"pm.test(\"Response contains at least one result\", function () {",
											"    pm.expect(JSONResponse.resultCount).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.1"
									},
									{
										"key": "{{cookieName}}",
										"value": "{{demoSSOToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/users/{{demoUserId}}/oauth2/applications?_prettyPrint=true&_queryFilter=true",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"users",
										"{{demoUserId}}",
										"oauth2",
										"applications"
									],
									"query": [
										{
											"key": "_fields",
											"value": "",
											"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
											"disabled": true
										},
										{
											"key": "_prettyPrint",
											"value": "true",
											"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
										},
										{
											"key": "_queryFilter",
											"value": "true",
											"description": "(Required) "
										}
									]
								},
								"description": "Get a list of the applications that have been granted OAuth 2.0 access. Only `_queryFilter=true` is supported."
							},
							"response": [
								{
									"name": "Returned if the list of applications cannot be produced due to an internal error.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/oauth2/applications#1.1_query_filter?&_prettyPrint=true&_queryFilter=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"oauth2",
												"applications"
											],
											"hash": "1.1_query_filter?&_prettyPrint=true&_queryFilter=true",
											"variable": [
												{
													"key": "user"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/oauth2/applications#1.1_query_filter?&_prettyPrint=true&_queryFilter=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"oauth2",
												"applications"
											],
											"hash": "1.1_query_filter?&_prettyPrint=true&_queryFilter=true",
											"variable": [
												{
													"key": "user"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Step 2: Delete Users' OAuth 2.0 Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 404\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if(pm.response.code === 200){",
											"",
											"    const JSONResponse = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Deleted expected OAuth 2.0 app\", function () {",
											"        pm.expect(JSONResponse._id).to.eql(pm.globals.get(\"oauth2App\"));",
											"    });",
											"",
											"};"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.1"
									},
									{
										"key": "{{cookieName}}",
										"value": "{{demoSSOToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/users/{{demoUserId}}/oauth2/applications/{{oauth2App}}?_prettyPrint=true#1.1_delete",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"users",
										"{{demoUserId}}",
										"oauth2",
										"applications",
										"{{oauth2App}}"
									],
									"query": [
										{
											"key": "_fields",
											"value": "",
											"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
											"disabled": true
										},
										{
											"key": "_prettyPrint",
											"value": "true",
											"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
										}
									],
									"hash": "1.1_delete"
								},
								"description": "Delete the tokens for the specified client ID."
							},
							"response": [
								{
									"name": "Returned if the list of applications cannot be produced due to an internal error.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/oauth2/applications/{{clientId}}#1.1_delete?&_prettyPrint=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"oauth2",
												"applications",
												"{{clientId}}"
											],
											"hash": "1.1_delete?&_prettyPrint=true",
											"variable": [
												{
													"key": "user"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/oauth2/applications/{{clientId}}#1.1_delete?&_prettyPrint=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"oauth2",
												"applications",
												"{{clientId}}"
											],
											"hash": "1.1_delete?&_prettyPrint=true",
											"variable": [
												{
													"key": "user"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "Many of the OAuth 2.0/OpenID Connect flows require the user to explicitly agree to provide the client with access to their resources.\n\nManage the users' OAuth 2.0 clients using these endpoints.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Devices",
					"item": [
						{
							"name": "Device Profiles",
							"item": [
								{
									"name": "Step 1: Query Users' Device Profiles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request contain results?",
													"if(JSONResponse.resultCount && JSONResponse.resultCount > 0)",
													"{",
													"  // Set `deviceProfileId` variable",
													"  pm.globals.set(\"deviceProfileId\", JSONResponse.result[0]._id);",
													"}",
													"else",
													"{",
													"  pm.globals.set(\"deviceProfileId\", \"none_found\");  ",
													"}",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains resultCount\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"Response contains at least one result\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.above(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile?_queryFilter=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"profile"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable.",
													"disabled": true
												},
												{
													"key": "_queryFilter",
													"value": "true",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}"
												}
											]
										},
										"description": "Query the user devices"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"profile"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"profile"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										}
									]
								},
								{
									"name": "Step 2: Update Users' Device Profile",
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"description": "(Required) ",
												"key": "If-Match",
												"value": "*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "{{cookieName}}",
												"type": "text",
												"value": "{{demoSSOToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"alias\": \"{{$randomUserName}}'s Device\",\n    \"location\": {\n        \"longitude\": {{$randomLongitude}},\n        \"latitude\": {{$randomLatitude}}\n    }\n}"
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile/:deviceProfileId?_prettyPrint=true#1.0_update",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"profile",
												":deviceProfileId"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												}
											],
											"hash": "1.0_update",
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}"
												},
												{
													"key": "deviceProfileId",
													"value": "{{deviceProfileId}}"
												}
											]
										},
										"description": "Update an existing user device alias"
									},
									"response": [
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"identifier\": \"<string>\",\n    \"alias\": \"<string>\",\n    \"lastSelectedDate\": \"<string>\",\n    \"metadata\": \"<string>\",\n    \"location\": {\n        \"longitude\": 5910496.137554675,\n        \"latitude\": -41063633.84429224\n    }\n}"
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile/{{identifier}}#1.0_update?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"profile",
														"{{identifier}}"
													],
													"hash": "1.0_update?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"identifier\": \"<string>\",\n    \"alias\": \"<string>\",\n    \"lastSelectedDate\": \"<string>\",\n    \"metadata\": \"<string>\",\n    \"location\": {\n        \"longitude\": 5910496.137554675,\n        \"latitude\": -41063633.84429224\n    }\n}"
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile/{{identifier}}#1.0_update?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"profile",
														"{{identifier}}"
													],
													"hash": "1.0_update?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Step 3: Delete Users' Device Profile",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"description": "(Required) ",
												"key": "If-Match",
												"value": "<string>"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile/:deviceProfileId?_prettyPrint=true#1.0_delete",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"profile",
												":deviceProfileId"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												}
											],
											"hash": "1.0_delete",
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}"
												},
												{
													"key": "deviceProfileId",
													"value": "{{deviceProfileId}}"
												}
											]
										},
										"description": "Delete user device"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile/{{identifier}}#1.0_delete?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"profile",
														"{{identifier}}"
													],
													"hash": "1.0_delete?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/profile/{{identifier}}#1.0_delete?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"profile",
														"{{identifier}}"
													],
													"hash": "1.0_delete?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "OATH",
							"item": [
								{
									"name": "Step 1: Query Users' OATH Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request contain results?",
													"if(JSONResponse.resultCount && JSONResponse.resultCount > 0)",
													"{",
													"  // Set `oathDeviceId` variable",
													"  pm.globals.set(\"oathDeviceId\", JSONResponse.result[0]._id);",
													"}",
													"else",
													"{",
													"  pm.globals.set(\"oathDeviceId\", \"none_found\");  ",
													"}",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains resultCount\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"Response contains at least one result\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath?_prettyPrint=true&_queryFilter=true#1.0_query_filter",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"oath"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_queryFilter",
													"value": "true",
													"description": "(Required) "
												}
											],
											"hash": "1.0_query_filter",
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Query the user's device profile"
									},
									"response": [
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"oath"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"oath"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Step 2: Check Users' OATH Device \"Skip\" Status",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath?_prettyPrint=true&_action=check",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"oath"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_action",
													"value": "check",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Checks if the user's Authenticator OATH module is 'skippable' and returns the result as a boolean"
									},
									"response": [
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath#1.0_action_check?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"oath"
													],
													"hash": "1.0_action_check?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath#1.0_action_check?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"oath"
													],
													"hash": "1.0_action_check?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Step 3: [Admin] Amend Skip Option on Users' OATH Device",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{adminSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}"
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath?_prettyPrint=true&_action=skip",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"oath"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_action",
													"value": "skip",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Sets the user's ability to skip an Authenticator OATH module"
									},
									"response": [
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath#1.0_action_skip?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"oath"
													],
													"hash": "1.0_action_skip?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath#1.0_action_skip?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"oath"
													],
													"hash": "1.0_action_skip?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "minim ullamco dolore"
										}
									]
								},
								{
									"name": "Step 4: [Admin] Reset (Remove) Users' OATH Device",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "{{cookieName}}",
												"type": "text",
												"value": "{{adminSSOToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath?_prettyPrint=true&_action=reset",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"oath"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_action",
													"value": "reset",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Sets the user's 'skippable' selection of Authenticator OATH module to default (NOT_SET) and deletes their profiles attribute"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath#1.0_action_reset?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"oath"
													],
													"hash": "1.0_action_reset?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/oath#1.0_action_reset?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"oath"
													],
													"hash": "1.0_action_reset?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Push",
							"item": [
								{
									"name": "Step 1: Query Users' Push Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request contain results?",
													"if(JSONResponse.resultCount && JSONResponse.resultCount > 0)",
													"{",
													"  // Set `pushDeviceId` variable",
													"  pm.globals.set(\"pushDeviceId\", JSONResponse.result[0]._id);",
													"}",
													"else",
													"{",
													"  pm.globals.set(\"pushDeviceId\", \"none_found\");  ",
													"}",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains resultCount\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"Response contains at least one result\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push?_prettyPrint=true&_queryFilter=true#1.0_query_filter",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"push"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_queryFilter",
													"value": "true",
													"description": "(Required) "
												}
											],
											"hash": "1.0_query_filter",
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Query the user's device profile"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"push"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"push"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										}
									]
								},
								{
									"name": "Step 2: Check Users' Push Device \"Skip\" Status",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push?_prettyPrint=true&_action=check",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"push"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_action",
													"value": "check",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Checks if the user's Authenticator Push module is 'skippable' and returns the result as a boolean"
									},
									"response": [
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push#1.0_action_check?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"push"
													],
													"hash": "1.0_action_check?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push#1.0_action_check?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"push"
													],
													"hash": "1.0_action_check?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Step 3: [Admin] Amend Skip Option on Users' Push Device",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{adminSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": true\n}"
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push?_prettyPrint=true&_action=skip",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"push"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_action",
													"value": "skip",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Sets the user's ability to skip an Authenticator Push module"
									},
									"response": [
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push#1.0_action_skip?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"push"
													],
													"hash": "1.0_action_skip?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push#1.0_action_skip?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"push"
													],
													"hash": "1.0_action_skip?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "minim ullamco dolore"
										}
									]
								},
								{
									"name": "Step 4: [Admin] Reset (Remove) Users' Push Device",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{adminSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push?_prettyPrint=true&_action=reset",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"push"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_action",
													"value": "reset"
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Sets the user's 'skippable' selection of Authenticator Push module to default (NOT_SET) and deletes their profile's attribute"
									},
									"response": [
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push#1.0_action_reset?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"push"
													],
													"hash": "1.0_action_reset?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/push#1.0_action_reset?&_prettyPrint=true&_action=<string>",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"push"
													],
													"hash": "1.0_action_reset?&_prettyPrint=true&_action=<string>",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "WebAuthn",
							"item": [
								{
									"name": "Step 1: Query Users' WebAuthn Devices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request contain results?",
													"if(JSONResponse.resultCount && JSONResponse.resultCount > 0)",
													"{",
													"  // Set `webAuthnDeviceId` variable",
													"  pm.globals.set(\"webAuthnDeviceId\", JSONResponse.result[0]._id);",
													"}",
													"else",
													"{",
													"  pm.globals.set(\"webAuthnDeviceId\", \"none_found\");  ",
													"}",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains resultCount\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"Response contains at least one result\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.above(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn?_prettyPrint=true&_queryFilter=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"webauthn"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_queryFilter",
													"value": "true",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												}
											]
										},
										"description": "Query the user's WebAuthn devices"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"webauthn"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"webauthn"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										}
									]
								},
								{
									"name": "Step 2: Update Users' WebAuthn Device",
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"deviceName\": \"{{$randomUserName}}'s WebAuthn Device\"\n}"
										},
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn/:webAuthnDeviceId?_prettyPrint=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"webauthn",
												":webAuthnDeviceId"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												},
												{
													"key": "webAuthnDeviceId",
													"value": "{{webAuthnDeviceId}}"
												}
											]
										},
										"description": "Update an existing WebAuthn user device"
									},
									"response": [
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"deviceName\": \"<string>\",\n    \"uuid\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn/{{uuid}}#1.0_update?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"webauthn",
														"{{uuid}}"
													],
													"hash": "1.0_update?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"deviceName\": \"<string>\",\n    \"uuid\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn/{{uuid}}#1.0_update?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"webauthn",
														"{{uuid}}"
													],
													"hash": "1.0_update?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Step 3: Delete Users' WebAuthn Device",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn/:webAuthnDeviceId?_prettyPrint=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"2fa",
												"webauthn",
												":webAuthnDeviceId"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												},
												{
													"key": "webAuthnDeviceId",
													"value": "{{webAuthnDeviceId}}"
												}
											]
										},
										"description": "Delete WebAuthn user device"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn/{{uuid}}#1.0_delete?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"webauthn",
														"{{uuid}}"
													],
													"hash": "1.0_delete?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/2fa/webauthn/{{uuid}}#1.0_delete?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"2fa",
														"webauthn",
														"{{uuid}}"
													],
													"hash": "1.0_delete?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Trusted",
							"item": [
								{
									"name": "Step 1: Query Users' Trusted Devices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request contain results?",
													"if(JSONResponse.resultCount && JSONResponse.resultCount > 0)",
													"{",
													"  // Set `trustedDeviceId` variable",
													"  pm.globals.set(\"trustedDeviceId\", JSONResponse.result[0]._id);",
													"}",
													"else",
													"{",
													"  pm.globals.set(\"trustedDeviceId\", \"none_found\");  ",
													"}",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains resultCount\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.a(\"number\");",
													"});",
													"",
													"pm.test(\"Response contains at least one result\", function () {",
													"    pm.expect(JSONResponse.resultCount).to.be.above(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/trusted?_prettyPrint=true&_queryFilter=true",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"trusted"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												},
												{
													"key": "_queryFilter",
													"value": "true",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}"
												}
											]
										},
										"description": "Query trusted user devices"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/trusted#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"trusted"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/trusted#1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"trusted"
													],
													"hash": "1.0_query_filter?&_prettyPrint=true&_queryFilter=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										}
									]
								},
								{
									"name": "Step 2: Delete Users' Trusted Device",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "resource=1.0"
											},
											{
												"description": "(Required) ",
												"key": "If-Match",
												"value": "<string>"
											},
											{
												"key": "{{cookieName}}",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/trusted/:trustedDeviceId?_prettyPrint=true#1.0_delete",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"users",
												":user",
												"devices",
												"trusted",
												":trustedDeviceId"
											],
											"query": [
												{
													"key": "_fields",
													"value": "",
													"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
													"disabled": true
												},
												{
													"key": "_prettyPrint",
													"value": "true",
													"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
												}
											],
											"hash": "1.0_delete",
											"variable": [
												{
													"key": "user",
													"value": "{{demoUserId}}",
													"description": "(Required) The identifier for the user for which the request is regarding."
												},
												{
													"key": "trustedDeviceId",
													"value": "{{trustedDeviceId}}"
												}
											]
										},
										"description": "Delete trusted user device"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/trusted/{{uuid}}#1.0_delete?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"trusted",
														"{{uuid}}"
													],
													"hash": "1.0_delete?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unexpected server error happened during the process",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) ",
														"key": "Accept-API-Version",
														"value": "resource=1.0"
													},
													{
														"description": "(Required) ",
														"key": "If-Match",
														"value": "*"
													}
												],
												"url": {
													"raw": "{{amUrl}}/json{{realm}}/users/:user/devices/trusted/{{uuid}}#1.0_delete?&_prettyPrint=true",
													"host": [
														"{{amUrl}}"
													],
													"path": [
														"json{{realm}}",
														"users",
														":user",
														"devices",
														"trusted",
														"{{uuid}}"
													],
													"hash": "1.0_delete?&_prettyPrint=true",
													"variable": [
														{
															"key": "user"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 93541721,\n \"message\": \"minim\",\n \"reason\": \"sint Excepteur\",\n \"detail\": \"veniam id qui\"\n}"
										}
									]
								}
							]
						}
					],
					"description": "Multi-factor authentication requires your users to register a device, which is used as an additional factor.\n\nQuery and manage those devices with these endpoints.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Users in the ForgeRock Identity Cloud have a record in the system containing various pieces of information relevant to them.\n\nWe call these records \"profiles\", and they can represent information such as the devices they use to authenticate, or the OAuth 2.0 clients they have given consent to use their data.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Managed Identities",
			"item": [
				{
					"name": "Server Assigned ID",
					"item": [
						{
							"name": "Step 1: Create a Managed Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"managedUsername\", pm.globals.replaceIn('{{$randomUserName}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"if(jsonData._id && jsonData._id != \"\"){",
											"    pm.globals.set(\"managedUserId\", jsonData._id);",
											"}",
											"if(jsonData.userName && jsonData.userName != \"\"){",
											"    pm.globals.set(\"managedUsername\", jsonData.userName);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userName\": \"{{managedUsername}}\",\n  \"sn\": \"{{$randomLastName}}\",\n  \"givenName\": \"{{$randomFirstName}}\",\n  \"mail\": \"{{managedUsername}}@postman.example.com\",\n  \"telephoneNumber\": \"{{$randomPhoneNumber}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/openidm/managed/alpha_user?_action=create",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"alpha_user"
									],
									"query": [
										{
											"key": "_action",
											"value": "create"
										}
									]
								},
								"description": "Create a new managed identity."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openidm",
												"managed",
												"user"
											],
											"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Step 2: Get a Managed Identity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"if(jsonData._id && jsonData._id != \"\"){",
											"    pm.globals.set(\"managedUserId\", jsonData._id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0",
										"disabled": true
									},
									{
										"key": "X-OpenIDM-Username",
										"type": "text",
										"value": "{{adminUsername}}",
										"disabled": true
									},
									{
										"key": "X-OpenIDM-Password",
										"type": "text",
										"value": "{{adminPassword}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/openidm/managed/alpha_user?_queryFilter=userName eq \"{{managedUsername}}\"",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"alpha_user"
									],
									"query": [
										{
											"key": "_fields",
											"value": "",
											"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
											"disabled": true
										},
										{
											"key": "_queryFilter",
											"value": "userName eq \"{{managedUsername}}\""
										}
									]
								},
								"description": "Obtain the details of a managed identity."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openidm",
												"managed",
												"user"
											],
											"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Step 3: Update a Managed Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"if(jsonData._id && jsonData._id != \"\"){",
											"    pm.globals.set(\"managedUserId\", jsonData._id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0",
										"disabled": true
									},
									{
										"key": "X-OpenIDM-Username",
										"type": "text",
										"value": "{{adminUsername}}"
									},
									{
										"key": "X-OpenIDM-Password",
										"type": "text",
										"value": "{{adminPassword}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"operation\": \"replace\",\n        \"field\": \"/telephoneNumber\",\n        \"value\": \"{{$randomPhoneNumber}}\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/openidm/managed/alpha_user?_action=patch&_queryFilter=userName eq \"{{managedUsername}}\"",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"alpha_user"
									],
									"query": [
										{
											"key": "_action",
											"value": "patch"
										},
										{
											"key": "_queryFilter",
											"value": "userName eq \"{{managedUsername}}\""
										},
										{
											"key": "_fields",
											"value": "",
											"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
											"disabled": true
										}
									]
								},
								"description": "Update the details, in this case; the telephone number, of a managed identity."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openidm",
												"managed",
												"user"
											],
											"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Step 4: Delete a Managed Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/openidm/managed/alpha_user/:_id",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"alpha_user",
										":_id"
									],
									"variable": [
										{
											"key": "_id",
											"value": "{{managedUserId}}"
										}
									]
								},
								"description": "Delete a managed identity."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openidm",
												"managed",
												"user"
											],
											"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "In this section, the ForgeRock Identity Cloud assigns the ID to your identites, ensuring uniqueness.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Client Assigned IDs",
					"item": [
						{
							"name": "Step 1: Create a Managed Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"managedUserId\", pm.globals.replaceIn('{{$guid}}'))",
											"pm.globals.set(\"managedUsername\", pm.globals.replaceIn('{{$randomUserName}}'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userName\": \"{{managedUsername}}\",\n  \"sn\": \"{{$randomLastName}}\",\n  \"givenName\": \"{{$randomFirstName}}\",\n  \"mail\": \"{{managedUsername}}@postman.example.com\",\n  \"telephoneNumber\": \"{{$randomPhoneNumber}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/openidm/managed/alpha_user/:_id",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"alpha_user",
										":_id"
									],
									"variable": [
										{
											"key": "_id",
											"value": "{{managedUserId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openidm",
												"managed",
												"user"
											],
											"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Step 2: Get a Managed Identity",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{platformUrl}}/openidm/managed/alpha_user/:_id",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"alpha_user",
										":_id"
									],
									"query": [
										{
											"key": "_fields",
											"value": "",
											"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "_id",
											"value": "{{managedUserId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openidm",
												"managed",
												"user"
											],
											"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Step 3: Update a Managed Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"operation\": \"replace\",\n        \"field\": \"/telephoneNumber\",\n        \"value\": \"{{$randomPhoneNumber}}\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/openidm/managed/alpha_user/:_id",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"alpha_user",
										":_id"
									],
									"query": [
										{
											"key": "_fields",
											"value": "",
											"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "_id",
											"value": "{{managedUserId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openidm",
												"managed",
												"user"
											],
											"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Step 4: Delete a Managed Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "resource=1.0",
										"disabled": true
									},
									{
										"key": "X-OpenIDM-Username",
										"type": "text",
										"value": "{{adminUsername}}"
									},
									{
										"key": "X-OpenIDM-Password",
										"type": "text",
										"value": "{{adminPassword}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/openidm/managed/alpha_user/:_id",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"alpha_user",
										":_id"
									],
									"variable": [
										{
											"key": "_id",
											"value": "{{managedUserId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ",
												"key": "Accept-API-Version",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openidm",
												"managed",
												"user"
											],
											"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Query All Managed Identities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request contain results?",
									"if(JSONResponse.resultCount && JSONResponse.resultCount > 0)",
									"{",
									"  // Set `managedUserId` variable",
									"  pm.globals.set(\"managedUserId\", JSONResponse.result[0]._id);",
									"}",
									"else",
									"{",
									"  pm.globals.set(\"managedUserId\", \"none_found\");  ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) ",
								"key": "Accept-API-Version",
								"value": "resource=1.0",
								"disabled": true
							},
							{
								"key": "{{cookieName}}",
								"value": "{{adminSSOToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/managed/alpha_user?_fields=userName,givenName,sn,mail,accountStatus&_prettyPrint=true&_queryFilter=true",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"managed",
								"alpha_user"
							],
							"query": [
								{
									"key": "_fields",
									"value": "userName,givenName,sn,mail,accountStatus",
									"description": "Optional parameter containing a comma separated list of field references specifying which fields of the targeted JSON resource should be returned."
								},
								{
									"key": "_prettyPrint",
									"value": "true",
									"description": "Optional parameter requesting that the returned JSON resource content should be formatted to be more human readable."
								},
								{
									"key": "_queryFilter",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) ",
										"key": "Accept-API-Version",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/openidm/managed/user#1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"openidm",
										"managed",
										"user"
									],
									"hash": "1.0_query_filter?_fields=&_prettyPrint=true&_queryFilter=<string>&_pageSize=<integer>&_totalPagedResultsPolicy=<string>&_sortKeys=<string>"
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "User objects that are stored in the ForgeRock Identity Cloud are referred to as managed identities.\n\nYou can add, change, and delete managed users by using the platform UI, or over the REST interface by using these endpoints.\n\nAll of the calls in this section require administrative access. The access token is provided as a bearer token in the headers of each request.\n\n> Note:\n>\n> Some of the examples in this collection use client-assigned IDs (such as bjensen and scarter) when creating objects because it makes the examples easier to read. \n> \n> In the Server assigned IDs section they are created with  IDs such as 55ef0a75-f261-47e9-a72b-f5c61c32d339. \n> \n>  Generally, immutable server-assigned UUIDs are used in production environments.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Auditing/Monitoring",
			"item": [
				{
					"name": "Auditing",
					"item": [
						{
							"name": "Step 1: Get Audit Log Sources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request contain results?",
											"if(JSONResponse.resultCount && JSONResponse.resultCount > 0)",
											"{",
											"  // Set `managedUserId` variable",
											"  pm.globals.set(\"auditSource\", JSONResponse.result[0]);",
											"}",
											"else",
											"{",
											"  pm.globals.set(\"auditSource\", \"none_found\");  ",
											"}",
											"",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId or authId\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('resultCount', 'result');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{logApiKey}}"
									},
									{
										"key": "x-api-secret",
										"value": "{{logApiSecret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/monitoring/logs/sources?_prettyPrint=true",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"monitoring",
										"logs",
										"sources"
									],
									"query": [
										{
											"key": "_prettyPrint",
											"value": "true"
										}
									]
								},
								"description": "Get log sources"
							},
							"response": [
								{
									"name": "List of log sources",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logs/sources?_pageSize=<integer>&_pagedResouresOffset=<integer>&_prettyPrint=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logs",
												"sources"
											],
											"query": [
												{
													"key": "_pageSize",
													"value": "<integer>"
												},
												{
													"key": "_pagedResouresOffset",
													"value": "<integer>"
												},
												{
													"key": "_prettyPrint",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"result\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"resultCount\": \"<integer>\",\n\t\"pagedResultsCookie\": \"<string>\",\n\t\"totalPagedResultsPolicy\": \"<string>\",\n\t\"totalPagedResults\": \"<integer>\",\n\t\"remainingPagedResults\": \"<integer>\"\n}"
								}
							]
						},
						{
							"name": "Step 2: Get Audit Logs for a Source",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = pm.response.json();",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains resultCount or result\", function () {",
											"    pm.expect(JSONResponse).to.have.any.keys('resultCount', 'result');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{logApiKey}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{logApiSecret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/monitoring/logs?source={{auditSource}}&_pageSize=10&_prettyPrint=true",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"monitoring",
										"logs"
									],
									"query": [
										{
											"key": "source",
											"value": "{{auditSource}}"
										},
										{
											"key": "beginTime",
											"value": "2020-08-27T15:10:36.177Z",
											"disabled": true
										},
										{
											"key": "endTime",
											"value": "{{$isoTimestamp}}",
											"disabled": true
										},
										{
											"key": "_pageSize",
											"value": "10"
										},
										{
											"key": "_prettyPrint",
											"value": "true"
										}
									]
								},
								"description": "Get log events"
							},
							"response": [
								{
									"name": "List of log events",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logs?source=<string>&beginTime=<dateTime>&endTime=<dateTime>&_pageSize=<integer>&_pagedResultsCookie=<string>&_prettyPrint=false&_sortKeys=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logs"
											],
											"query": [
												{
													"key": "source",
													"value": "<string>"
												},
												{
													"key": "beginTime",
													"value": "<dateTime>"
												},
												{
													"key": "endTime",
													"value": "<dateTime>"
												},
												{
													"key": "_pageSize",
													"value": "<integer>"
												},
												{
													"key": "_pagedResultsCookie",
													"value": "<string>"
												},
												{
													"key": "_prettyPrint",
													"value": "false"
												},
												{
													"key": "_sortKeys",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"result\": [\n\t\t{\n\t\t\t\"payload\": \"<object>\",\n\t\t\t\"timestamp\": \"<dateTime>\",\n\t\t\t\"type\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"payload\": \"<object>\",\n\t\t\t\"timestamp\": \"<dateTime>\",\n\t\t\t\"type\": \"<string>\"\n\t\t}\n\t],\n\t\"resultCount\": \"<integer>\",\n\t\"pagedResultsCookie\": \"<string>\",\n\t\"totalPagedResultsPolicy\": \"<string>\",\n\t\"totalPagedResults\": \"<integer>\",\n\t\"remainingPagedResults\": \"<integer>\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Tail the Audit Logs for a Source",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"if(jsonData.pagedResultsCookie && jsonData.pagedResultsCookie != \"\"){",
											"    pm.globals.set(\"pagedResultsCookie\", jsonData.pagedResultsCookie);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains results\", function () {",
											"    pm.expect(jsonData).to.have.any.keys('resultCount', 'result');",
											"});",
											"",
											"pm.test(\"Response contains pagedResultsCookie\", function () {",
											"    pm.expect(jsonData).to.have.any.keys('pagedResultsCookie');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{logApiKey}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{logApiSecret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/monitoring/logs/tail?source={{auditSource}}&_prettyPrint=true",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"monitoring",
										"logs",
										"tail"
									],
									"query": [
										{
											"key": "source",
											"value": "{{auditSource}}"
										},
										{
											"key": "_prettyPrint",
											"value": "true"
										}
									]
								},
								"description": "Tail log events"
							},
							"response": [
								{
									"name": "List of log events",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logs/tail?source=<string>&_pagedResultsCookie=<string>&_prettyPrint=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logs",
												"tail"
											],
											"query": [
												{
													"key": "source",
													"value": "<string>"
												},
												{
													"key": "_pagedResultsCookie",
													"value": "<string>"
												},
												{
													"key": "_prettyPrint",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"result\": [\n\t\t{\n\t\t\t\"payload\": \"<object>\",\n\t\t\t\"timestamp\": \"<dateTime>\",\n\t\t\t\"type\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"payload\": \"<object>\",\n\t\t\t\"timestamp\": \"<dateTime>\",\n\t\t\t\"type\": \"<string>\"\n\t\t}\n\t],\n\t\"resultCount\": \"<integer>\",\n\t\"pagedResultsCookie\": \"<string>\",\n\t\"totalPagedResultsPolicy\": \"<string>\",\n\t\"totalPagedResults\": \"<integer>\",\n\t\"remainingPagedResults\": \"<integer>\"\n}"
								}
							]
						},
						{
							"name": "Step 4: Tail the Audit Logs for a Source Since Last Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"if(jsonData.pagedResultsCookie && jsonData.pagedResultsCookie != \"\"){",
											"    pm.globals.set(\"pagedResultsCookie\", jsonData.pagedResultsCookie);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains results\", function () {",
											"    pm.expect(jsonData).to.have.any.keys('resultCount', 'result');",
											"});",
											"",
											"pm.test(\"Response contains pagedResultsCookie\", function () {",
											"    pm.expect(jsonData).to.have.any.keys('pagedResultsCookie');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{logApiKey}}"
									},
									{
										"key": "x-api-secret",
										"type": "text",
										"value": "{{logApiSecret}}"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/monitoring/logs/tail?source={{auditSource}}&_pagedResultsCookie={{pagedResultsCookie}}&_prettyPrint=false",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"monitoring",
										"logs",
										"tail"
									],
									"query": [
										{
											"key": "source",
											"value": "{{auditSource}}"
										},
										{
											"key": "_pagedResultsCookie",
											"value": "{{pagedResultsCookie}}"
										},
										{
											"key": "_prettyPrint",
											"value": "false"
										}
									]
								},
								"description": "Tail log events"
							},
							"response": [
								{
									"name": "List of log events",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/logs/tail?source=<string>&_pagedResultsCookie=<string>&_prettyPrint=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logs",
												"tail"
											],
											"query": [
												{
													"key": "source",
													"value": "<string>"
												},
												{
													"key": "_pagedResultsCookie",
													"value": "<string>"
												},
												{
													"key": "_prettyPrint",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"result\": [\n\t\t{\n\t\t\t\"payload\": \"<object>\",\n\t\t\t\"timestamp\": \"<dateTime>\",\n\t\t\t\"type\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"payload\": \"<object>\",\n\t\t\t\"timestamp\": \"<dateTime>\",\n\t\t\t\"type\": \"<string>\"\n\t\t}\n\t],\n\t\"resultCount\": \"<integer>\",\n\t\"pagedResultsCookie\": \"<string>\",\n\t\"totalPagedResultsPolicy\": \"<string>\",\n\t\"totalPagedResults\": \"<integer>\",\n\t\"remainingPagedResults\": \"<integer>\"\n}"
								}
							]
						}
					],
					"description": "The Audit Logging Service uses a structured message format that adheres to a consistent log structure common across the ForgeRock Identity Platform. This common structure allows correlation between log messages of the different components of the Platform once the transaction IDs are trusted by enabling the ForgerRock trust transaction header system property. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Health",
					"item": [
						{
							"name": "Check Health",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"ID Cloud status is OK\", function () {",
											"    pm.expect(JSONResponse.status).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{platformUrl}}/monitoring/health",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"monitoring",
										"health"
									]
								},
								"description": "Is the Identity Cloud \"alive\"?"
							},
							"response": [
								{
									"name": "Prometheus metrics for all AM pods",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/metrics/prometheus/am",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"prometheus",
												"am"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": "# HELP am_cts_task_queue_size number of operations waiting in a CTS queue\n# TYPE am_cts_task_queue_size gauge\nam_cts_task_queue_size{kubernetes_pod_name=\"am-568cc4fbb6-cjnpg\",} 0.0"
								}
							]
						}
					],
					"description": "Check the health status of your ForgeRock Identity Cloud.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Monitoring",
					"item": [
						{
							"name": "Get Prometheus Metrics (AM)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{logApiKey}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{logApiSecret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/monitoring/prometheus/am",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"monitoring",
										"prometheus",
										"am"
									]
								},
								"description": "AM prometheus metrics"
							},
							"response": [
								{
									"name": "Prometheus metrics for all AM pods",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/metrics/prometheus/am",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"prometheus",
												"am"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": "# HELP am_cts_task_queue_size number of operations waiting in a CTS queue\n# TYPE am_cts_task_queue_size gauge\nam_cts_task_queue_size{kubernetes_pod_name=\"am-568cc4fbb6-cjnpg\",} 0.0"
								}
							]
						},
						{
							"name": "Get Prometheus Metrics (IDM)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{logApiKey}}"
									},
									{
										"key": "x-api-secret",
										"type": "text",
										"value": "{{logApiSecret}}"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/monitoring/prometheus/idm",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"monitoring",
										"prometheus",
										"idm"
									]
								},
								"description": "AM prometheus metrics"
							},
							"response": [
								{
									"name": "Prometheus metrics for all AM pods",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/metrics/prometheus/am",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"metrics",
												"prometheus",
												"am"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": "# HELP am_cts_task_queue_size number of operations waiting in a CTS queue\n# TYPE am_cts_task_queue_size gauge\nam_cts_task_queue_size{kubernetes_pod_name=\"am-568cc4fbb6-cjnpg\",} 0.0"
								}
							]
						}
					],
					"description": "Prometheus is third-party software used for gathering and processing monitoring data. ForgeRock Identity CLoud exposes the endpoints in this section, which Prometheus uses to gather metrics.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "The ForgeRock Identity Cloud supports a comprehensive Audit Logging Service that captures key auditing events, critical for system security, troubleshooting, and regulatory compliance.\n\nAudit logs gather operational information about events occurring within a deployment to track processes and security data, such as authentication mechanisms, system access, user and administrator activity, error messages, and configuration changes. \n\nThe ID Cloud also offer advanced monitoring services that will let you monitor metrics, such as authentication and authorization outcomes, token-related operations, CTS queues, or JVM usage.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OAuth 2.0 Flows",
			"item": [
				{
					"name": "Authorization Code Grant",
					"item": [
						{
							"name": "Step 1: Obtain an SSO Token as a Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.tokenId && jsonData.tokenId != \"\"){",
											"    pm.globals.set(\"demoSSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true,
								"removeRefererHeaderOnRedirect": true,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{postmanDemoUsername}}",
										"description": "Username for the demo user."
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{postmanDemoPassword}}",
										"description": "Password for the demo user."
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "The media type of the resource."
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"description": "This collection documents version 2.1 of the authentication resource."
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service"
										},
										{
											"key": "authIndexValue",
											"value": "PasswordGrant"
										}
									]
								},
								"description": "Log in to the authorization server using the credentials of the demo user.\n\nNote: delete your cookies before using this call.\n\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "X-OpenAM-Username",
												"value": "{{postmanDemoUsername}}",
												"description": "Username for the demo user."
											},
											{
												"key": "X-OpenAM-Password",
												"value": "{{postmanDemoPassword}}",
												"description": "Password for the demo user."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The media type of the resource."
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.1",
												"description": "This collection documents version 2.1 of the authentication resource."
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:10:30 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"sOpI1fhpsRQhOFwZqIRvbCgvlQk.*AAJTSQACMDEAAlNLABxNcnp5TDgvTGpuN0dBeEFNKzBaVlYzOXpOQW89AAR0eXBlAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 2: Get Authorization Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.args.code && jsonData.args.code != \"\") {",
											"        pm.globals.set(\"authorization_code\", jsonData.args.code);",
											"    }",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{cookieName}}={{demoSSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "write ",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"description": "Response types the client will support and use.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{demoSSOToken}}",
											"description": "SSO token of the demo user, to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"type": "text"
										},
										{
											"key": "service",
											"value": "PasswordGrant",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/authorize",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user.\n"
							},
							"response": [
								{
									"name": "Success - headers captured by HttpBin.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "scope",
													"value": "write ",
													"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
													"type": "text"
												},
												{
													"key": "response_type",
													"value": "code",
													"description": "Response types the client will support and use.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"description": "The complete URI to which client redirects the user if the request is successful.",
													"type": "text"
												},
												{
													"key": "decision",
													"value": "allow",
													"description": "The complete URI to which client redirects the user if the request is successful.",
													"type": "text"
												},
												{
													"key": "csrf",
													"value": "{{demoSSOToken}}",
													"description": "SSO token of the demo user, to protect against cross-site request forgery.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/authorize",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"authorize"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:10:47 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "937"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Server",
											"value": "gunicorn/19.9.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										}
									],
									"cookie": [],
									"body": "{\n    \"args\": {\n        \"client_id\": \"forgerockDemoConfidentialClient\",\n        \"code\": \"oIQFFQ1S5Fxnqs5U_EMWxYEJktQ\",\n        \"iss\": \"http://openam.example.com:8080/openam/oauth2\"\n    },\n    \"data\": \"\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Cookie\": \"amlbcookie=01; iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*\",\n        \"Host\": \"httpbin.org\",\n        \"Referer\": \"http://openam.example.com:8080/openam/oauth2/realms/root/authorize\",\n        \"User-Agent\": \"PostmanRuntime/7.26.3\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5f352dc7-0d6bd5fceafcd01e856febd2\"\n    },\n    \"json\": null,\n    \"method\": \"GET\",\n    \"origin\": \"5.65.200.229\",\n    \"url\": \"https://httpbin.org/anything?code=oIQFFQ1S5Fxnqs5U_EMWxYEJktQ&iss=http:%2F%2Fopenam.example.com:8080%2Fopenam%2Foauth2&client_id=forgerockDemoConfidentialClient\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Exchange the Authorization Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "The grant type required for the Authorization Code grant.",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "The authentication code.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								},
								"description": "Authenticate with the authorization server using the details of the confidential client and the authorization code recieved in the previous call.\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"description": "The grant type required for the Authorization Code grant.",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"description": "The authentication code.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"description": "The complete URI to which client redirects the user if the request is successful.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "1644"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:11:06 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJ0eXAiJ9.eyJzdWIiOiJkZPXXcM\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLC.eyl0VHJXpdhFiWDw\",\n    \"scope\": \"write\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
								}
							]
						},
						{
							"name": "Step 4: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"postmanConfidentialClientId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"description": "Access token you want to introspect.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"introspect"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "351"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:13:22 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"scope\": \"write\",\n    \"realm\": \"/\",\n    \"client_id\": \"forgerockDemoConfidentialClient\",\n    \"user_id\": \"demo\",\n    \"token_type\": \"Bearer\",\n    \"exp\": 1597324266,\n    \"sub\": \"demo\",\n    \"iss\": \"http://openam.example.com:8080/openam/oauth2\",\n    \"auth_level\": 0,\n    \"authGrantId\": \"KrTzIkhIQNqgkrcQBIoGu57eNFE\",\n    \"auditTrackingId\": \"037f02f9-d821-4f72-8563-c5050c40fdc3-49716\",\n    \"expires_in\": 3600\n}"
								}
							]
						}
					],
					"description": "The Authorization Code grant is a two-step interactive process used when a client, for example, a Java application running on a server, requires access to protected resources.\n\nThe Authorization Code grant is the most secure of all the OAuth 2.0 grants for the following reasons:\n\n\tIt is a two-step process: the user must authenticate and authorize the client to see the resources and the authorization server must validate the code again before issuing the access token.\n\t\n\tThe authorization server delivers the access token directly to the client, usually over HTTPS. The client secret is never exposed publicly, which protects confidential clients.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Authorization Code Grant with PKCE",
					"item": [
						{
							"name": "Step 1: Obtain an SSO Token as a Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.tokenId && jsonData.tokenId != \"\"){",
											"    pm.globals.set(\"demoSSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followOriginalHttpMethod": true,
								"removeRefererHeaderOnRedirect": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Username for the demo user.",
										"key": "X-OpenAM-Username",
										"value": "{{postmanDemoUsername}}"
									},
									{
										"description": "Password for the demo user.",
										"key": "X-OpenAM-Password",
										"value": "{{postmanDemoPassword}}"
									},
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service"
										},
										{
											"key": "authIndexValue",
											"value": "PasswordGrant"
										}
									]
								},
								"description": "Log in to the authorization server using the credentials of the demo user.\n\nNote: delete your cookies before using this call.\n\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Username for the demo user.",
												"key": "X-OpenAM-Username",
												"value": "{{postmanDemoUsername}}"
											},
											{
												"description": "Password for the demo user.",
												"key": "X-OpenAM-Password",
												"value": "{{postmanDemoPassword}}"
											},
											{
												"description": "The media type of the resource.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "This collection documents version 2.1 of the authentication resource.",
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:13:43 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"n0VDJh2dIfN9rUSzXOZPwr2R-nc.*AAJTSQACMDEAAlNLABxSdkRHNHpoTzIyWFVxSFp1NENxbmg3U043OXc9AAR0eXBlAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 2: Get Authorization Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.args.code && jsonData.args.code != \"\") {",
											"        pm.globals.set(\"authorization_code\", jsonData.args.code);",
											"    }",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.globals.set(\"code_challenge\", code_challenge);",
											"pm.globals.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{cookieName}}={{demoSSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "share",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"description": "Response types the client will support and use.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{demoSSOToken}}",
											"description": "SSO token of a ForgeRock user, to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information. This flow can be used machine-to-machine, by assuming consent, for example between two services provided by the same organization.",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"description": "The generated code challenge. See the \"Pre-request SCript\" tab for details.",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"description": "The method used to generate the code challenge.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/authorize",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "iplanetDirectoryPro",
												"value": "{{demoSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "scope",
													"value": "share",
													"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
													"type": "text"
												},
												{
													"key": "response_type",
													"value": "code",
													"description": "Response types the client will support and use.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "csrf",
													"value": "{{demoSSOToken}}",
													"description": "SSO token of a ForgeRock user, to protect against cross-site request forgery.",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"description": "The complete URI to which client redirects the user if the request is successful.",
													"type": "text"
												},
												{
													"key": "decision",
													"value": "allow",
													"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information. This flow can be used machine-to-machine, by assuming consent, for example between two services provided by the same organization.",
													"type": "text"
												},
												{
													"key": "code_challenge",
													"value": "{{code_challenge}}",
													"description": "The generated code challenge.",
													"type": "text"
												},
												{
													"key": "code_challenge_method",
													"value": "S256",
													"description": "The method used to generate the code challenge.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/authorize",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"authorize"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:14:01 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "1079"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Server",
											"value": "gunicorn/19.9.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										}
									],
									"cookie": [],
									"body": "{\n    \"args\": {\n        \"client_id\": \"forgerockDemoConfidentialClient\",\n        \"code\": \"rXspXy1Z03nredTwVDo6qCO1I-4\",\n        \"iss\": \"http://openam.example.com:8080/openam/oauth2\"\n    },\n    \"data\": \"\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Cookie\": \"amlbcookie=01; iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*\",\n        \"Host\": \"httpbin.org\",\n        \"Iplanetdirectorypro\": \"sOpI1RvbCgvlQk.*AAJTSQACMDEA.*\",\n        \"Referer\": \"http://openam.example.com:8080/openam/oauth2/realms/root/authorize\",\n        \"User-Agent\": \"PostmanRuntime/7.26.3\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5f352e89-db9fc460f6fadf84ef688bbc\"\n    },\n    \"json\": null,\n    \"method\": \"GET\",\n    \"origin\": \"5.65.200.229\",\n    \"url\": \"https://httpbin.org/anything?code=rXspXy1Z03nredTwVDo6qCO1I-4&iss=http:%2F%2Fopenam.example.com:8080%2Fopenam%2Foauth2&client_id=forgerockDemoConfidentialClient\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Exchange the Authorization Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "The grant type required for the Authorization Code with PKCE grant.",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "The authentication code from the previous step.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"description": "The generated code verifier. See the \"Pre-request Script\" tab of \"Step 2\" for details.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								},
								"description": "Authenticate with the authorization server using the details of the confidential client and the authorization code recieved in the previous call.\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"description": "The grant type required for the Authorization Code with PKCE grant.",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"description": "The authentication code from the previous step.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"description": "The complete URI to which client redirects the user if the request is successful.",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code_verifier}}",
													"description": "The generated code verifier.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "1644"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:14:20 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJ0eXAiJ9.eyJzdWIiOiJkZPXXcM\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLC.eyl0VHJXpdhFiWDw\",\n    \"scope\": \"share\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
								}
							]
						},
						{
							"name": "Step 4: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"postmanConfidentialClientId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"description": "Access token you want to introspect.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"introspect"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "351"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:14:35 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"scope\": \"share\",\n    \"realm\": \"/\",\n    \"client_id\": \"forgerockDemoConfidentialClient\",\n    \"user_id\": \"demo\",\n    \"token_type\": \"Bearer\",\n    \"exp\": 1597324460,\n    \"sub\": \"demo\",\n    \"iss\": \"http://openam.example.com:8080/openam/oauth2\",\n    \"auth_level\": 0,\n    \"authGrantId\": \"HZdG4E4NnNcP6k4T2bCTxPPeysg\",\n    \"auditTrackingId\": \"037f02f9-d821-4f72-8563-c5050c40fdc3-50979\",\n    \"expires_in\": 3600\n}"
								}
							]
						}
					],
					"description": "The Authorization Code Grant, when combined with the PKCE standard (RFC 7636), is used when a client, usually a mobile or a JavaScript application, requires access to protected resources.\n\nThe flow is similar to the regular Authorization Code Grant type, but the client must generate a code that will be part of the communication between the client and the authorization server. This code mitigates against interception attacks performed by malicious users.\n\nSince communication between the client and the authorization server is not secure, clients are usually public so their secrets do not get compromised. Also, browser-based clients making OAuth 2.0 requests to different domains must implement Cross-Origin Resource Sharing (CORS) calls to access OAuth 2.0 resources in different domains.\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Implicit Grant",
					"item": [
						{
							"name": "Step 1: Obtain an SSO Token as a Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.tokenId && jsonData.tokenId != \"\"){",
											"    pm.globals.set(\"demoSSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followOriginalHttpMethod": true,
								"removeRefererHeaderOnRedirect": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Username for the demo user.",
										"key": "X-OpenAM-Username",
										"value": "{{postmanDemoUsername}}"
									},
									{
										"description": "Password for the demo user.",
										"key": "X-OpenAM-Password",
										"value": "{{postmanDemoPassword}}"
									},
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service"
										},
										{
											"key": "authIndexValue",
											"value": "PasswordGrant"
										}
									]
								},
								"description": "Log in to the authorization server using the credentials of the demo user.\n\nNote: delete your cookies before using this call.\n\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Username for the demo user.",
												"key": "X-OpenAM-Username",
												"value": "{{postmanDemoUsername}}"
											},
											{
												"description": "Password for the demo user.",
												"key": "X-OpenAM-Password",
												"value": "{{postmanDemoPassword}}"
											},
											{
												"description": "The media type of the resource.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "This collection documents version 2.1 of the authentication resource.",
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:15:01 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"HQP67NRnzJoBqi7NkEJCQMQIjXA.*AAJTSQACMDEAAlNLABxzUDdwa0VnaXo4ODhPZUE4QzhGREdaRDVmczQ9AAR0eXBlAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 2: Get Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function QueryStringToJSON(qs) {            ",
											"    var keyvaluepairs = qs.slice(qs.indexOf(\"#\")+1).split('&');",
											"    ",
											"    var result = {};",
											"    keyvaluepairs.forEach(function(keyvaluepair) {",
											"        keyvaluepair = keyvaluepair.split('=');",
											"        result[keyvaluepair[0]] = decodeURIComponent(keyvaluepair[1] || '');",
											"    });",
											"    return JSON.parse(JSON.stringify(result));",
											"}",
											"",
											"if(pm.response.code == 302)",
											"{",
											"   let redirectLocation = QueryStringToJSON(pm.response.headers.get(\"Location\"));",
											"    pm.globals.set(\"implicitGrantAccessToken\", redirectLocation.access_token);",
											"}",
											"else",
											"{",
											"    pm.globals.set(\"implicitGrantAccessToken\", \"ERROR: 302 not returned!\");",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is NOT enabled in Postman (Status code is 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Response `Location` header contained `code` parameter\", () => {",
											"    let redirectLocation = QueryStringToJSON(pm.response.headers.get(\"Location\"));",
											"    pm.expect(redirectLocation.access_token).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{postmanClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{postmanPublicClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{postmanPublicClientId}}",
											"description": "The ID of the Public OAuth Client.",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "token",
											"description": "Response types the client will support and use.",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information. This flow can be used machine-to-machine, by assuming consent, for example between two services provided by the same organization.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{demoSSOToken}}",
											"description": "SSO token of a ForgeRock user, to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/authorize",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "Example - Location header contains access_token.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the Public OAuth Client.",
													"type": "text"
												},
												{
													"key": "response_type",
													"value": "token",
													"description": "Response types the client will support and use.",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "write",
													"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
													"type": "text"
												},
												{
													"key": "decision",
													"value": "allow",
													"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information. This flow can be used machine-to-machine, by assuming consent, for example between two services provided by the same organization.",
													"type": "text"
												},
												{
													"key": "csrf",
													"value": "{{demoSSOToken}}",
													"description": "SSO token of a ForgeRock user, to protect against cross-site request forgery.",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"description": "The complete URI to which client redirects the user if the request is successful.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/authorize",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"authorize"
											]
										}
									},
									"status": "Found",
									"code": 302,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Location",
											"value": "https://httpbin.org/anything#access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkZW1vIiwiY3RzIjoiT0FVVEgyX1NUQVRFTEVTU19HUkFOVCIsImF1dGhfbGV2ZWwiOjAsImF1ZGl0VHJhY2tpbmdJZCI6IjAzN2YwMmY5LWQ4MjEtNGY3Mi04NTYzLWM1MDUwYzQwZmRjMy01MTM5OSIsImlzcyI6Imh0dHA6Ly9vcGVuYW0uZXhhbXBsZS5jb206ODA4MC9vcGVuYW0vb2F1dGgyIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoiNi1uLU1GLWRLMGJfTng2TnFFQVFCdkVYQ2xzIiwiYXVkIjoiZm9yZ2Vyb2NrRGVtb1B1YmxpY0NsaWVudCIsIm5iZiI6MTU5NzMyMDkxOCwiZ3JhbnRfdHlwZSI6InRva2VuIiwic2NvcGUiOlsid3JpdGUiXSwiYXV0aF90aW1lIjoxNTk3MzIwOTAxLCJyZWFsbSI6Ii8iLCJleHAiOjE1OTczMjQ1MTgsImlhdCI6MTU5NzMyMDkxOCwiZXhwaXJlc19pbiI6MzYwMCwianRpIjoiMlJLWUx2U0IyNUVoVFE3WHhITzBXVFZqa25VIn0.SdLW4L8iZLiTymoL_SJCaGHQ5GmBuYlelcKe-Ou9gwM&iss=http://openam.example.com:8080/openam/oauth2&token_type=Bearer&expires_in=3599&client_id=forgerockDemoPublicClient"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Set-Cookie",
											"value": "OAUTH_REQUEST_ATTRIBUTES=DELETED; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:15:18 GMT"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Step 3: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"postmanPublicClientId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{implicitGrantAccessToken}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the public OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{implicitGrantAccessToken}}",
													"description": "Access token you want to introspect.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the public OAuth Client.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"introspect"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "345"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:16:33 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"scope\": \"write\",\n    \"realm\": \"/\",\n    \"client_id\": \"forgerockDemoPublicClient\",\n    \"user_id\": \"demo\",\n    \"token_type\": \"Bearer\",\n    \"exp\": 1597324518,\n    \"sub\": \"demo\",\n    \"iss\": \"http://openam.example.com:8080/openam/oauth2\",\n    \"auth_level\": 0,\n    \"authGrantId\": \"6-n-MF-dK0b_Nx6NqEAQBvEXCls\",\n    \"auditTrackingId\": \"037f02f9-d821-4f72-8563-c5050c40fdc3-51399\",\n    \"expires_in\": 3600\n}"
								}
							]
						}
					],
					"description": "The Implicit grant is designed for public clients that run inside the resource owner's user-agent, for example, JavaScript applications.\n\nSince applications running in the user-agent are considered less trusted than applications running in servers, the authorization server will never issue refresh tokens in this flow. There is a security impact of cross-site scripting (XSS) attacks that could leak the access token to other systems, and implement Cross-Origin Resource Sharing (CORS) to make OAuth 2.0 requests to different domains.\n\nDue to the security implications of this flow, it is recommended to use the Authorization Code grant with PKCE flow whenever possible.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Resource Owner Password Credentials Grant",
					"item": [
						{
							"name": "Step 1: Get Access Token as a Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"description": "The grant type required for the Resource Owner Password Credentials Grant.",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{postmanDemoUsername}}",
											"description": "Username for a ForgeRock demo user.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{postmanDemoPassword}}",
											"description": "Password for a ForgeRock demo user.",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								},
								"description": "Sends the confidential client credentials to the authorization server to get authenticated, and request an access token."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "The grant type required for the Resource Owner Password Credentials Grant.",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{postmanDemoUsername}}",
													"description": "Username for a ForgeRock demo user.",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{postmanDemoPassword}}",
													"description": "Password for a ForgeRock demo user.",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "write",
													"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "1570"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:16:52 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJ0eXAiJ9.eyJzdWIiOiJkZPXXcM\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLC.eyl0VHJXpdhFiWDw\",\n    \"scope\": \"write\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
								}
							]
						},
						{
							"name": "Step 2: Introspect the Access Token ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"postmanConfidentialClientId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"description": "Access token you want to introspect.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the Confidential OAuth Client.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"introspect"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "351"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:17:03 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"scope\": \"write\",\n    \"realm\": \"/\",\n    \"client_id\": \"forgerockDemoConfidentialClient\",\n    \"user_id\": \"demo\",\n    \"token_type\": \"Bearer\",\n    \"exp\": 1597324612,\n    \"sub\": \"demo\",\n    \"iss\": \"http://openam.example.com:8080/openam/oauth2\",\n    \"auth_level\": 0,\n    \"authGrantId\": \"HAQs5GyHyZvbj_bOkdX9Ul03lh0\",\n    \"auditTrackingId\": \"037f02f9-d821-4f72-8563-c5050c40fdc3-52010\",\n    \"expires_in\": 3600\n}"
								}
							]
						}
					],
					"description": "The Resource Owner Password Credentials (ROPC) grant flow allows the client to use the resource owner's user name and password to get an access token.\n\nSince the resource owner shares their credentials with the client, this flow is deemed the most insecure of the OAuth 2.0 flows. The resource owner's credentials can potentially be leaked or abused by the client application, and the resource owner has no control over the authorization process.\n\nYou should implement the ROPC grant flow only if the resource owner has a trust relationship with the client (such as the device operating system, or a highly privileged application).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Client Credentials Grant",
					"item": [
						{
							"name": "Step 1: Get Access Token as a Confidential Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"description": "The grant type required for the Client Credentials grant.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "print",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								},
								"description": "Sends the confidential client credentials to the authorization server to get authenticated, and request an access token."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"description": "The grant type required for the Client Credentials grant.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "print",
													"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "840"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:17:13 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJ0eXAiJ9.eyJzdWIiOiJkZPXXcM\",\n    \"scope\": \"print\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
								}
							]
						},
						{
							"name": "Step 2: Introspect the Access Token ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"postmanConfidentialClientId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"description": "Access token you want to introspect.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the Confidential OAuth Client.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"introspect"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "390"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:17:22 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"scope\": \"print\",\n    \"realm\": \"/\",\n    \"client_id\": \"forgerockDemoConfidentialClient\",\n    \"user_id\": \"forgerockDemoConfidentialClient\",\n    \"token_type\": \"Bearer\",\n    \"exp\": 1597324633,\n    \"sub\": \"forgerockDemoConfidentialClient\",\n    \"iss\": \"http://openam.example.com:8080/openam/oauth2\",\n    \"authGrantId\": \"5tq7oSZ62txPaK80X3Mdex4zzew\",\n    \"auditTrackingId\": \"037f02f9-d821-4f72-8563-c5050c40fdc3-52181\",\n    \"expires_in\": 3600\n}"
								}
							]
						}
					],
					"description": "The Client Credentials grant is used when a client is also the resource owner and is accessing its own data instead of acting in behalf of a user. For example, an application that needs access to a protected resource to retrieve its own data to perform a task, or update its configuration, would use the Client Credentials grant to acquire an access token.\n\nThe Client Credentials Grant flow supports confidential clients only.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Device Flow",
					"item": [
						{
							"name": "Step 1: Obtain an SSO Token as a Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.tokenId && jsonData.tokenId != \"\"){",
											"    pm.globals.set(\"demoSSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followOriginalHttpMethod": true,
								"removeRefererHeaderOnRedirect": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Username for the demo user.",
										"key": "X-OpenAM-Username",
										"value": "{{postmanDemoUsername}}"
									},
									{
										"description": "Password for the demo user.",
										"key": "X-OpenAM-Password",
										"value": "{{postmanDemoPassword}}"
									},
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service"
										},
										{
											"key": "authIndexValue",
											"value": "PasswordGrant"
										}
									]
								},
								"description": "Log in to the authorization server using the credentials of the demo user.\n\nNote: delete your cookies before using this call.\n\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Username for the demo user.",
												"key": "X-OpenAM-Username",
												"value": "{{postmanDemoUsername}}"
											},
											{
												"description": "Password for the demo user.",
												"key": "X-OpenAM-Password",
												"value": "{{postmanDemoPassword}}"
											},
											{
												"description": "The media type of the resource.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "This collection documents version 2.1 of the authentication resource.",
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:17:34 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"oamkww1D53KfOLxi_W3ycun7CHU.*AAJTSQACMDEAAlNLABxRdmtuMTlwYWZrYzY0V1RXQUpnbzhUL0FRT2s9AAR0eXBlAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 2: Get User Code and Device Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.user_code && jsonData.user_code != \"\") {",
											"        pm.globals.set(\"user_code\", jsonData.user_code);",
											"    }",
											"",
											"        if(jsonData.device_code && jsonData.device_code != \"\") {",
											"        pm.globals.set(\"device_code\", jsonData.device_code);",
											"    }",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains `user_code`.\", function () {",
											"    pm.expect(jsonData.user_code).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains `device_code`.\", function () {",
											"    pm.expect(jsonData.device_code).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "response_type",
											"value": "device_code",
											"description": "Response types this client will support and use.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanPublicClientId}}",
											"description": "The ID of the public OAuth Client.",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/device/code",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"device",
										"code"
									]
								},
								"description": "Receive a user code and a device code, which can be used to provide consent.\n\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "response_type",
													"value": "device_code",
													"description": "Response types this client will support and use.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the public OAuth Client.",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "write",
													"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/device/code",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"device",
												"code"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "610"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:17:45 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"user_code\": \"KNpesLcE\",\n    \"device_code\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJodHRwOi8vb3BlbmFtLmV4YW1wbGUuY29tOjgwODAvb3BlbmFtL29hdXRoMiIsIm5iZiI6MTU5NzMyMTA2NSwidXNlcl9jb2RlIjoiS05wZXNMY0UiLCJpc3MiOiJodHRwOi8vb3BlbmFtLmV4YW1wbGUuY29tOjgwODAvb3BlbmFtL29hdXRoMiIsImV4cCI6MTU5NzMyMTM2NSwiaWF0IjoxNTk3MzIxMDY1LCJqdGkiOiJmNGM1NDFlYS0wZmQ3LTQzN2YtYjY2Zi0zMGJlZGY2MDU0YzEifQ.ykCohgneHtyxy4MYkP8CrwTQpSp4fpZrulOW7xKXWEk\",\n    \"interval\": 5,\n    \"verification_uri\": \"http://openam.example.com:8080/openam/oauth2/device/user\",\n    \"expires_in\": 300,\n    \"verification_url\": \"http://openam.example.com:8080/openam/oauth2/device/user\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Grant Consent Using the User Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains 'done: true'.\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"done: true\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{demoSSOToken}}",
										"description": "SSO token to protect against cross-site request forgery.",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the scopes in the request (to the client).",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{demoSSOToken}}",
											"description": "SSO token to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "user_code",
											"value": "{{user_code}}",
											"description": "The user code for the device.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/device/user",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"device",
										"user"
									]
								},
								"description": "Grants consent using the user code recieved in the previous call to allow the client device to access resources."
							},
							"response": [
								{
									"name": "Example - Page contains \"done: true\"",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{demoSSOToken}}",
												"description": "SSO token to protect against cross-site request forgery.",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "decision",
													"value": "allow",
													"description": "Decision that grants access to the scopes in the request (to the client).",
													"type": "text"
												},
												{
													"key": "csrf",
													"value": "{{demoSSOToken}}",
													"description": "SSO token to protect against cross-site request forgery.",
													"type": "text"
												},
												{
													"key": "user_code",
													"value": "{{user_code}}",
													"description": "The user code for the device.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/device/user",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"device",
												"user"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "969"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:17:57 GMT"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<!--\n  Copyright 2015-2018 ForgeRock AS. All Rights Reserved\n \n  Use of this code requires a commercial software license with ForgeRock AS.\n  or with one of its affiliates. All use shall be exclusively subject\n  to such license between the licensee and ForgeRock AS.\n-->\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"description\" content=\"OAuth2 Authorization\">\n        <title>OAuth2 Authorization Server</title>\n    </head>\n    <body style=\"display:none\">\n        <div id=\"wrapper\">Loading...</div>\n        <footer id=\"footer\" class=\"footer\"></footer>\n        <script type=\"text/javascript\">\n  pageData = {\n      locale: \"en_GB\",\n      baseUrl : \"http://openam.example.com:8080/openam/XUI/\",\n      realm : \"\\//XUI\",\n      done: true\n  };\n</script>\n        <script src=\"http://openam.example.com:8080/openam/XUI/main-device.js\"></script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Step 4: Poll for Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Status code is not 400 - Polling too Quickly\", () => {",
											"  // The polling interval has not elapsed since the last request.  ",
											"  pm.expect(pm.response.code).to.not.eql(400);",
											"});",
											"",
											"pm.test(\"Status code is not 401 - Token not valid\", () => {",
											"  // The request contains a token no longer valid.  ",
											"  pm.expect(pm.response.code).to.not.eql(401);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{postmanPublicClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "http://oauth.net/grant_type/device/1.0",
											"description": "Grant types needed for the Device Flow grant. ",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{device_code}}",
											"description": "The device code for the device.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								},
								"description": "Poll the authorization server for an access token, to find out whether the resource owner has already given consent or not."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "http://oauth.net/grant_type/device/1.0",
													"description": "Grant types needed for the Device Flow grant. ",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{device_code}}",
													"description": "The device code for the device.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "1618"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:18:30 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJ0eXAiJ9.eyJzdWIiOiJkZPXXcM\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLC.eyl0VHJXpdhFiWDw\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
								}
							]
						},
						{
							"name": "Step 5: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"postmanPublicClientId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the public OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"description": "Access token you want to introspect.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the public OAuth Client.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"introspect"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "345"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:18:39 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"scope\": \"write\",\n    \"realm\": \"/\",\n    \"client_id\": \"forgerockDemoPublicClient\",\n    \"user_id\": \"demo\",\n    \"token_type\": \"Bearer\",\n    \"exp\": 1597324710,\n    \"sub\": \"demo\",\n    \"iss\": \"http://openam.example.com:8080/openam/oauth2\",\n    \"auth_level\": 0,\n    \"authGrantId\": \"NqnPcBkWNYRwRfnYPDKCGvSWLoo\",\n    \"auditTrackingId\": \"037f02f9-d821-4f72-8563-c5050c40fdc3-52703\",\n    \"expires_in\": 3600\n}"
								}
							]
						}
					],
					"description": "The Device Flow is designed for client devices that have limited user interfaces, such as a set-top box, streaming radio, or a server process running on a headless operating system.\n\nRather than logging in by using the client device itself, you can authorize the client to access protected resources on your behalf by logging in with a different user agent, such as an Internet browser or smartphone, and entering a code displayed on the client device.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Device Flow with PKCE",
					"item": [
						{
							"name": "Step 1: Obtain an SSO Token as a Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.tokenId && jsonData.tokenId != \"\"){",
											"    pm.globals.set(\"demoSSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followOriginalHttpMethod": true,
								"removeRefererHeaderOnRedirect": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Username for the demo user.",
										"key": "X-OpenAM-Username",
										"value": "{{postmanDemoUsername}}"
									},
									{
										"description": "Password for the demo user.",
										"key": "X-OpenAM-Password",
										"value": "{{postmanDemoPassword}}"
									},
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service"
										},
										{
											"key": "authIndexValue",
											"value": "PasswordGrant"
										}
									]
								},
								"description": "Log in to the authorization server using the credentials of the demo user.\n\nNote: delete your cookies before using this call.\n\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Username for the demo user.",
												"key": "X-OpenAM-Username",
												"value": "{{postmanDemoUsername}}"
											},
											{
												"description": "Password for the demo user.",
												"key": "X-OpenAM-Password",
												"value": "{{postmanDemoPassword}}"
											},
											{
												"description": "The media type of the resource.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "This collection documents version 2.1 of the authentication resource.",
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:18:57 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"JyDQQGqJbwjlvdHIx7ZHSbnZWGw.*AAJTSQACMDEAAlNLABxLMWUzMm5SL1JTdzZEblNFQUlCakpTMklZRU09AAR0eXBlAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 2: Get User Code and Device Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.user_code && jsonData.user_code != \"\") {",
											"        pm.globals.set(\"user_code\", jsonData.user_code);",
											"    }",
											"",
											"        if(jsonData.device_code && jsonData.device_code != \"\") {",
											"        pm.globals.set(\"device_code\", jsonData.device_code);",
											"    }",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains `user_code`.\", function () {",
											"    pm.expect(jsonData.user_code).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains `device_code`.\", function () {",
											"    pm.expect(jsonData.device_code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.globals.set(\"code_challenge\", code_challenge);",
											"pm.globals.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "response_type",
											"value": "device_code",
											"description": "Response types this client will support and use.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanPublicClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "manage",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"description": "The method used to generate the code challenge.",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"description": "The generated code challenge.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/device/code",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"device",
										"code"
									]
								},
								"description": "Receive a user code and a device code, which can be used to provide consent.\n\n\n\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "response_type",
													"value": "device_code",
													"description": "Response types this client will support and use.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "manage",
													"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
													"type": "text"
												},
												{
													"key": "code_challenge_method",
													"value": "S256",
													"description": "The method used to generate the code challenge.",
													"type": "text"
												},
												{
													"key": "code_challenge",
													"value": "{{code_challenge}}",
													"description": "The generated code challenge.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/device/code",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"device",
												"code"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "610"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:19:08 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"user_code\": \"x3W2JEFJ\",\n    \"device_code\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJodHRwOi8vb3BlbmFtLmV4YW1wbGUuY29tOjgwODAvb3BlbmFtL29hdXRoMiIsIm5iZiI6MTU5NzMyMTE0OCwidXNlcl9jb2RlIjoieDNXMkpFRkoiLCJpc3MiOiJodHRwOi8vb3BlbmFtLmV4YW1wbGUuY29tOjgwODAvb3BlbmFtL29hdXRoMiIsImV4cCI6MTU5NzMyMTQ0OCwiaWF0IjoxNTk3MzIxMTQ4LCJqdGkiOiIxYWI0MTE5Yy0yYjE4LTQxYWYtYjZjMC1iNTRmZTQxZWZhNjEifQ.gCoWICyPwJhD7LshgpfLpc9zEt6iUrsjmbGv6yk2kW0\",\n    \"interval\": 5,\n    \"verification_uri\": \"http://openam.example.com:8080/openam/oauth2/device/user\",\n    \"expires_in\": 300,\n    \"verification_url\": \"http://openam.example.com:8080/openam/oauth2/device/user\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Grant Consent Using the User Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains 'done: true'.\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"done: true\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{demoSSOToken}}",
										"description": "SSO token to protect against cross-site request forgery.",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the scopes in the request (to the client).",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{demoSSOToken}}",
											"description": "SSO token to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "user_code",
											"value": "{{user_code}}",
											"description": "The user code for the device.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/device/user",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"device",
										"user"
									]
								},
								"description": "Grants consent using the user code recieved in the previous call to allow the client device to access resources."
							},
							"response": [
								{
									"name": "Example - page contains \"done: true\"",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{demoSSOToken}}",
												"description": "SSO token to protect against cross-site request forgery.",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "decision",
													"value": "allow",
													"description": "Decision that grants access to the scopes in the request (to the client).",
													"type": "text"
												},
												{
													"key": "csrf",
													"value": "{{demoSSOToken}}",
													"description": "SSO token to protect against cross-site request forgery.",
													"type": "text"
												},
												{
													"key": "user_code",
													"value": "{{user_code}}",
													"description": "The user code for the device.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/device/user",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"device",
												"user"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "969"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:19:21 GMT"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<!--\n  Copyright 2015-2018 ForgeRock AS. All Rights Reserved\n \n  Use of this code requires a commercial software license with ForgeRock AS.\n  or with one of its affiliates. All use shall be exclusively subject\n  to such license between the licensee and ForgeRock AS.\n-->\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"description\" content=\"OAuth2 Authorization\">\n        <title>OAuth2 Authorization Server</title>\n    </head>\n    <body style=\"display:none\">\n        <div id=\"wrapper\">Loading...</div>\n        <footer id=\"footer\" class=\"footer\"></footer>\n        <script type=\"text/javascript\">\n  pageData = {\n      locale: \"en_GB\",\n      baseUrl : \"http://openam.example.com:8080/openam/XUI/\",\n      realm : \"\\//XUI\",\n      done: true\n  };\n</script>\n        <script src=\"http://openam.example.com:8080/openam/XUI/main-device.js\"></script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Step 4: Poll for Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Status code is not 400 - Polling too Quickly\", () => {",
											"  // The polling interval has not elapsed since the last request.  ",
											"  pm.expect(pm.response.code).to.not.eql(400);",
											"});",
											"",
											"pm.test(\"Status code is not 401 - Token not valid\", () => {",
											"  // The request contains a token no longer valid.  ",
											"  pm.expect(pm.response.code).to.not.eql(401);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{postmanPublicClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "http://oauth.net/grant_type/device/1.0",
											"description": "Grant types this client will support and use.",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{device_code}}",
											"description": "The device code for the device.",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"description": "The generated code verifier. See the Pre-request script in the previous step.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								},
								"description": "Poll the authorization server for an access token, to find out whether the resource owner has already given consent or not."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "http://oauth.net/grant_type/device/1.0",
													"description": "Grant types this client will support and use.",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{device_code}}",
													"description": "The device code for the device.",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code_verifier}}",
													"description": "The generated code verifier. See the Pre-request script in the previous step.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "1620"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:19:44 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJ0eXAiJ9.eyJzdWIiOiJkZPXXcM\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLC.eyl0VHJXpdhFiWDw\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
								},
								{
									"name": "Example - polling too quickly",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "http://oauth.net/grant_type/device/1.0",
													"description": "Grant types this client will support and use.",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{device_code}}",
													"description": "The device code for the device.",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code_verifier}}",
													"description": "The generated code verifier. See the Pre-request script in the previous step.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "103"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:20:00 GMT"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"error_description\": \"The polling interval has not elapsed since the last request\",\n    \"error\": \"slow_down\"\n}"
								}
							]
						},
						{
							"name": "Step 5: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"postmanPublicClientId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"description": "Access token you want to introspect.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanPublicClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/introspect",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"introspect"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "346"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:20:17 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"active\": true,\n    \"scope\": \"manage\",\n    \"realm\": \"/\",\n    \"client_id\": \"forgerockDemoPublicClient\",\n    \"user_id\": \"demo\",\n    \"token_type\": \"Bearer\",\n    \"exp\": 1597324784,\n    \"sub\": \"demo\",\n    \"iss\": \"http://openam.example.com:8080/openam/oauth2\",\n    \"auth_level\": 0,\n    \"authGrantId\": \"bdtxHp1kka6iin4Q2KpNgCfgcVs\",\n    \"auditTrackingId\": \"037f02f9-d821-4f72-8563-c5050c40fdc3-53256\",\n    \"expires_in\": 3600\n}"
								}
							]
						}
					],
					"description": "The Device Flow is designed for client devices that have limited user interfaces, such as a set-top box. Since the devices are usually public clients and the device code can be intercepted by malicious users, you can combine the Device Flow with the PKCE standard (RFC 7636) to mitigate against interception attacks if the devices allow it.\n\nThis flow is beyond the PKCE and the Device Flow specs, since the Device Flow spec is still a draft and it is not officially recognized by the PKCE standard.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Refresh Token Flow",
					"item": [
						{
							"name": "Step 1: Obtain an SSO Token as a Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.tokenId && jsonData.tokenId != \"\"){",
											"    pm.globals.set(\"demoSSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains tokenId\", function () {",
											"    pm.expect(jsonData.tokenId).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followOriginalHttpMethod": true,
								"removeRefererHeaderOnRedirect": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Username for the demo user.",
										"key": "X-OpenAM-Username",
										"value": "{{postmanDemoUsername}}"
									},
									{
										"description": "Password for the demo user.",
										"key": "X-OpenAM-Password",
										"value": "{{postmanDemoPassword}}"
									},
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{amUrl}}/json{{realm}}/authenticate?authIndexType=service&authIndexValue=PasswordGrant",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"json{{realm}}",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service"
										},
										{
											"key": "authIndexValue",
											"value": "PasswordGrant"
										}
									]
								},
								"description": "Log in to the authorization server using the credentials of the demo user.\n\nNote: delete your cookies before using this call.\n\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Username for the demo user.",
												"key": "X-OpenAM-Username",
												"value": "{{postmanDemoUsername}}"
											},
											{
												"description": "Password for the demo user.",
												"key": "X-OpenAM-Password",
												"value": "{{postmanDemoPassword}}"
											},
											{
												"description": "The media type of the resource.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "This collection documents version 2.1 of the authentication resource.",
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											}
										],
										"url": {
											"raw": "{{amUrl}}/json{{realm}}/authenticate",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"json{{realm}}",
												"authenticate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, must-revalidate"
										},
										{
											"key": "Set-Cookie",
											"value": "amlbcookie=01; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*; Path=/; Domain=example.com; HttpOnly"
										},
										{
											"key": "Content-API-Version",
											"value": "resource=2.1"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:20:51 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"tokenId\": \"Qx-LkyIzZYgvoGOoM5iomPXaSfQ.*AAJTSQACMDEAAlNLABxCMGhVUWJ5Q1VObjl6NGRCY0t2OGN0YWplZDA9AAR0eXBlAANDVFMAAlMxAAA.*\",\n    \"successUrl\": \"/openam/console\",\n    \"realm\": \"/\"\n}"
								}
							]
						},
						{
							"name": "Step 2: Get Authorization Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.args.code && jsonData.args.code != \"\") {",
											"        pm.globals.set(\"authorization_code\", jsonData.args.code);",
											"    }",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{cookieName}}={{demoSSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "edit",
											"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"description": "Response types the client will support and use.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{demoSSOToken}}",
											"description": "SSO token of a ForgeRock user, to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information. This flow can be used machine-to-machine, by assuming consent, for example between two services provided by the same organization.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/authorize",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"authorize"
									]
								},
								"description": "Make a call to the authorization server's authorization endpoint, specifying the SSO token of the user in a cookie."
							},
							"response": [
								{
									"name": "Example - parameters captured by HttpBin",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "scope",
													"value": "edit",
													"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
													"type": "text"
												},
												{
													"key": "response_type",
													"value": "code",
													"description": "Response types the client will support and use.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "csrf",
													"value": "{{demoSSOToken}}",
													"description": "SSO token of a ForgeRock user, to protect against cross-site request forgery.",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"description": "The complete URI to which client redirects the user if the request is successful.",
													"type": "text"
												},
												{
													"key": "decision",
													"value": "allow",
													"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information. This flow can be used machine-to-machine, by assuming consent, for example between two services provided by the same organization.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/authorize",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"authorize"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:21:03 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "937"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Server",
											"value": "gunicorn/19.9.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true"
										}
									],
									"cookie": [],
									"body": "{\n    \"args\": {\n        \"client_id\": \"forgerockDemoConfidentialClient\",\n        \"code\": \"TGBSt2LHHruGUU0lAOrrjr08jtA\",\n        \"iss\": \"http://openam.example.com:8080/openam/oauth2\"\n    },\n    \"data\": \"\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Cookie\": \"amlbcookie=01; iPlanetDirectoryPro=sOpI1RvbCgvlQk.*AAJTSQACMDEA.*\",\n        \"Host\": \"httpbin.org\",\n        \"Referer\": \"http://openam.example.com:8080/openam/oauth2/realms/root/authorize\",\n        \"User-Agent\": \"PostmanRuntime/7.26.3\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5f35302f-6babefe013e7ad28bf1a82f0\"\n    },\n    \"json\": null,\n    \"method\": \"GET\",\n    \"origin\": \"5.65.200.229\",\n    \"url\": \"https://httpbin.org/anything?code=TGBSt2LHHruGUU0lAOrrjr08jtA&iss=http:%2F%2Fopenam.example.com:8080%2Fopenam%2Foauth2&client_id=forgerockDemoConfidentialClient\"\n}"
								}
							]
						},
						{
							"name": "Step 3: Exchange the Authentication Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains refresh_token\", function () {",
											"    pm.expect(jsonData.refresh_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "Grant types this client will support and use.",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "The authentication code.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								},
								"description": "Authenticate with the authorization server using the details of the confidential client and the authentication code recieved in the previous call.\n"
							},
							"response": [
								{
									"name": "Example",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"description": "Grant types this client will support and use.",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"description": "The authentication code.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the Confidential OAuth Client.",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"description": "The complete URI to which client redirects the user if the request is successful.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "1641"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:21:39 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJ0eXAiJ9.eyJzdWIiOiJkZPXXcM\",\n    \"refresh_token\": \"eyJ0eXAiOiJKV1QiLC.eyl0VHJXpdhFiWDw\",\n    \"scope\": \"edit\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
								}
							]
						},
						{
							"name": "Step 4: Refresh the Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Response contains new refresh_token\", function () {",
											"    pm.expect(jsonData.refresh_token).to.not.eql(pm.globals.get(\"refresh_token\"));",
											"});",
											"",
											"pm.test(\"Response contains new access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.not.eql(pm.globals.get(\"access_token\"));",
											"});",
											"",
											"",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\" && jsonData.access_token != pm.globals.get(\"access_token\"))",
											"{",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\" && jsonData.refresh_token != pm.globals.get(\"refresh_token\"))",
											"{",
											"    pm.globals.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains refresh_token\", function () {",
											"    pm.expect(jsonData.refresh_token).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "The Grant Type supported by AM.",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"description": "The refresh token.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the OAuth Confidential Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the OAuth Confidential Client. See the ForgeRock documentation for stronger methods of client authentication.",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "edit",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"access_token"
									]
								},
								"description": "Use a refresh token to ask for a new access token."
							},
							"response": [
								{
									"name": "Example - new access and refresh tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "refresh_token",
													"description": "The Grant Type supported by AM.",
													"type": "text"
												},
												{
													"key": "refresh_token",
													"value": "{{refresh_token}}",
													"description": "The refresh token.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the OAuth Confidential Client.",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the OAuth Confidential Client. See the ForgeRock documentation for stronger methods of client authentication.",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "edit",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/access_token",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"access_token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "1627"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:21:50 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJ0eXAiOiJKV1.cyI6Imh0dHA6Ly9vcGVuYW0uZ\",\n    \"refresh_token\": \"eyJ0CJhbGciOiJ.NzgxNCIsImlzcyI6Imh0dH\",\n    \"scope\": \"edit\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3599\n}"
								}
							]
						},
						{
							"name": "Step 5: Revoke the Refresh Token ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response JSON is empty\", function () {",
											"    pm.expect(responseBody.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"description": "The refresh token to revoke.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{postmanConfidentialClientId}}",
											"description": "The ID of the Confidential OAuth Client. ",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{postmanClientSecret}}",
											"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{amUrl}}/oauth2{{realm}}/token/revoke",
									"host": [
										"{{amUrl}}"
									],
									"path": [
										"oauth2{{realm}}",
										"token",
										"revoke"
									]
								},
								"description": "Revoke the refresh token created in the previous call. Revoking a refresh token also revokes any other associated tokens that were issued with the same authorization grant. "
							},
							"response": [
								{
									"name": "Example - Empty response when revoking a token.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{refresh_token}}",
													"description": "The refresh token to revoke.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{postmanConfidentialClientId}}",
													"description": "The ID of the Confidential OAuth Client. ",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{postmanClientSecret}}",
													"description": "The secret of the Confidential OAuth Client. See the ForgeRock documentation for stronger methods of client authentication.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{amUrl}}/oauth2{{realm}}/token/revoke",
											"host": [
												"{{amUrl}}"
											],
											"path": [
												"oauth2{{realm}}",
												"token",
												"revoke"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Aug 2020 12:22:07 GMT"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					],
					"description": "Refresh tokens are a type of token that can be used to obtain a new access token that may have identical or narrower scopes than the original. Refresh tokens are long-lived by default, and AM allows you to configure the lifetime of the tokens in the OAuth 2.0 Provider settings, or in each client. By default, the configuration of the OAuth 2.0 Provider is used. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "This section describes the OAuth 2.0 flows that the ForgeRock Identity Cloud supports, and also provides the information required to implement them. \n\nYou should decide which flow is best for your environment based on the application that will be the OAuth 2.0 client. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Well Known",
			"item": [
				{
					"name": "Assetlinks",
					"item": [
						{
							"name": "Step 1: Create or update assetlinks.json",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"relation\": [\n      \"delegate_permission/common.handle_all_urls\",\n      \"delegate_permission/common.get_login_creds\"\n    ],\n    \"target\": {\n      \"namespace\": \"web\",\n      \"site\": \"https://id.mycompany.com\"\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{customDomainUrl}}/.well-known/assetlinks.json",
									"host": [
										"{{customDomainUrl}}"
									],
									"path": [
										".well-known",
										"assetlinks.json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2: Verify assetlinks.json",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{customDomainUrl}}/.well-known/assetlinks.json",
									"host": [
										"{{customDomainUrl}}"
									],
									"path": [
										".well-known",
										"assetlinks.json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3: Delete assetlinks.json",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{customDomainUrl}}/.well-known/assetlinks.json",
									"host": [
										"{{customDomainUrl}}"
									],
									"path": [
										".well-known",
										"assetlinks.json"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"frUtils = {",
					"    detectCallbacks: function(JSONResponse) {",
					"        var parsedJSON = JSON.parse(JSONResponse);",
					"        // Default to halting the collection",
					"        postman.setNextRequest(null);",
					"        _.each(parsedJSON.callbacks, (auth_callback) => {",
					"            // NameCallback",
					"            if(auth_callback.type == \"NameCallback\" || auth_callback.type == \"PasswordCallback\") {",
					"                postman.setNextRequest(\"Step 2a: Handle Username / Password Callback\");",
					"            }",
					"            // ValidatedCreateUsernameCallback",
					"            if(auth_callback.type == \"ValidatedCreateUsernameCallback\" || auth_callback.type == \"ValidatedCreatePasswordCallback\") {",
					"                postman.setNextRequest(\"Step 2b: Handle Validated Username / Password Callback\");",
					"            }",
					"            // BooleanAttributeInputCallback",
					"            if(auth_callback.type == \"BooleanAttributeInputCallback\") {",
					"                postman.setNextRequest(\"Step 2f: Handle Progressive Profile Callback\");",
					"            }",
					"            // ChoiceCallback",
					"            if(auth_callback.type == \"ChoiceCallback\") {",
					"                postman.setNextRequest(\"Step 2c: Handle Choice Callback\");",
					"            }",
					"            // TextInputCallback",
					"            if(auth_callback.type == \"TextInputCallback\") {",
					"                postman.setNextRequest(\"Step 2d: Handle Text Input Callback\");",
					"               ",
					"            }",
					"            // DeviceProfileCallback",
					"            if(auth_callback.type == \"DeviceProfileCallback\") {",
					"                postman.setNextRequest(\"Step 2e: Handle Device Profile Callback\");",
					"            }",
					"        });",
					"    },",
					"    getSessionCookieName: function(allResponseHeaders) {",
					"        // Fallback to default cookie name from AM",
					"        var customCookieName = \"iPlanetDirectoryPro\";",
					"        for (const [key, value] of Object.entries(allResponseHeaders)) {",
					"",
					"            var headerName = allResponseHeaders[key].key.toString();",
					"            var headerString = allResponseHeaders[key].value.toString();",
					"            ",
					"            if(headerName === \"set-cookie\")",
					"            {",
					"                var cookieSettings = headerString.split(\";\");",
					"                var cookieName = cookieSettings[0].split(\"=\");",
					"                if(cookieName[0] != \"amlbcookie\"){",
					"                    customCookieName = cookieName[0];",
					"                }",
					"            }",
					"        }",
					"        return customCookieName;",
					"    }",
					"};    ",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "platformUrl",
			"value": "https://<tenant-env-fqdn>"
		},
		{
			"key": "amUrl",
			"value": "https://<tenant-env-fqdn>/am"
		},
		{
			"key": "idmUrl",
			"value": "https://<tenant-env-fqdn>/openidm"
		},
		{
			"key": "IDCloudAdminUsername",
			"value": "admin@example.com"
		},
		{
			"key": "IDCloudAdminPassword",
			"value": ""
		},
		{
			"key": "realm",
			"value": "/realms/root/realms/alpha"
		},
		{
			"key": "customDomainUrl",
			"value": "https://id.mycompany.com"
		},
		{
			"key": "cookieName",
			"value": "iPlanetDirectoryPro"
		},
		{
			"key": "loginJourney",
			"value": "Login"
		},
		{
			"key": "redirect_uri",
			"value": "https://httpbin.org/anything"
		},
		{
			"key": "postmanAdminClientId",
			"value": "postmanAdminClient"
		},
		{
			"key": "postmanConfidentialClientId",
			"value": "postmanConfidentialClient"
		},
		{
			"key": "postmanPublicClientId",
			"value": "postmanPublicClient"
		},
		{
			"key": "postmanClientSecret",
			"value": ""
		},
		{
			"key": "postmanAdminUsername",
			"value": "postmanAdminUser"
		},
		{
			"key": "postmanAdminPassword",
			"value": ""
		},
		{
			"key": "postmanDemoUsername",
			"value": "postmanDemoUser"
		},
		{
			"key": "postmanDemoPassword",
			"value": ""
		},
		{
			"key": "postmanDemoEmail",
			"value": "demo.user@postman.example.com"
		},
		{
			"key": "logApiKey",
			"value": ""
		},
		{
			"key": "logApiSecret",
			"value": ""
		}
	]
}
